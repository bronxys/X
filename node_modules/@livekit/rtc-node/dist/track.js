// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import { create } from '@bufbuild/protobuf';
import { FfiClient, FfiHandle } from './ffi_client.js';
import { CreateAudioTrackRequestSchema, CreateVideoTrackRequestSchema } from './proto/track_pb.js';
export class Track {
    constructor(owned) {
        this.info = owned.info;
        this.ffi_handle = new FfiHandle(owned.handle.id);
    }
    get sid() {
        return this.info.sid;
    }
    get name() {
        return this.info.name;
    }
    get kind() {
        return this.info.kind;
    }
    get stream_state() {
        return this.info.streamState;
    }
    get muted() {
        return this.info.muted;
    }
}
export class LocalAudioTrack extends Track {
    constructor(owned) {
        super(owned);
    }
    static createAudioTrack(name, source) {
        const req = create(CreateAudioTrackRequestSchema, {
            name: name,
            sourceHandle: source.ffiHandle.handle,
        });
        const res = FfiClient.instance.request({
            message: { case: 'createAudioTrack', value: req },
        });
        return new LocalAudioTrack(res.track);
    }
}
export class LocalVideoTrack extends Track {
    constructor(owned) {
        super(owned);
    }
    static createVideoTrack(name, source) {
        const req = create(CreateVideoTrackRequestSchema, {
            name: name,
            sourceHandle: source.ffiHandle.handle,
        });
        const res = FfiClient.instance.request({
            message: { case: 'createVideoTrack', value: req },
        });
        return new LocalVideoTrack(res.track);
    }
}
export class RemoteVideoTrack extends Track {
    constructor(owned) {
        super(owned);
    }
}
export class RemoteAudioTrack extends Track {
    constructor(owned) {
        super(owned);
    }
}
//# sourceMappingURL=track.js.map