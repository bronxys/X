// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import { create } from '@bufbuild/protobuf';
import { FfiClient } from './ffi_client.js';
import { E2eeManagerSetEnabledRequestSchema, E2eeRequestSchema, EncryptionType, FrameCryptorSetEnabledRequestSchema, FrameCryptorSetKeyIndexRequestSchema, GetKeyRequestSchema, GetSharedKeyRequestSchema, RatchetKeyRequestSchema, RatchetSharedKeyRequestSchema, SetKeyRequestSchema, SetSharedKeyRequestSchema, } from './proto/e2ee_pb.js';
const DEFAULT_RATCHET_SALT = new TextEncoder().encode('LKFrameEncryptionKey');
const DEFAULT_RATCHET_WINDOW_SIZE = 16;
const DEFAULT_FAILURE_TOLERANCE = -1;
export const defaultKeyProviderOptions = {
    ratchetSalt: DEFAULT_RATCHET_SALT,
    ratchetWindowSize: DEFAULT_RATCHET_WINDOW_SIZE,
    failureTolerance: DEFAULT_FAILURE_TOLERANCE,
};
export const defaultE2EEOptions = {
    keyProviderOptions: defaultKeyProviderOptions,
    encryptionType: EncryptionType.GCM,
};
export class KeyProvider {
    /** internal */
    constructor(roomHandle, opts) {
        this.roomHandle = roomHandle;
        this.options = opts;
    }
    setSharedKey(sharedKey, keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'setSharedKey',
                value: create(SetSharedKeyRequestSchema, {
                    keyIndex: keyIndex,
                    sharedKey: sharedKey,
                }),
            },
        });
        FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
    }
    exportSharedKey(keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'getSharedKey',
                value: create(GetSharedKeyRequestSchema, {
                    keyIndex: keyIndex,
                }),
            },
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
        return res.message.value.key;
    }
    ratchetSharedKey(keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'ratchetSharedKey',
                value: create(RatchetSharedKeyRequestSchema, {
                    keyIndex: keyIndex,
                }),
            },
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
        return res.message.value.newKey;
    }
    setKey(participantIdentity, keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'setKey',
                value: create(SetKeyRequestSchema, {
                    keyIndex: keyIndex,
                    participantIdentity: participantIdentity,
                }),
            },
        });
        FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
    }
    exportKey(participantIdentity, keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'getKey',
                value: create(GetKeyRequestSchema, {
                    keyIndex: keyIndex,
                    participantIdentity: participantIdentity,
                }),
            },
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
        return res.message.value.key;
    }
    ratchetKey(participantIdentity, keyIndex) {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'ratchetKey',
                value: create(RatchetKeyRequestSchema, {
                    keyIndex: keyIndex,
                    participantIdentity: participantIdentity,
                }),
            },
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
        return res.message.value.newKey;
    }
}
export class FrameCryptor {
    constructor(roomHandle, participantIdentity, keyIndex, enabled) {
        this.roomHandle = 0n;
        this.roomHandle = roomHandle;
        this.participantIdentity = participantIdentity;
        this.keyIndex = keyIndex;
        this.enabled = enabled;
    }
    setEnabled(enabled) {
        this.enabled = enabled;
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'cryptorSetEnabled',
                value: create(FrameCryptorSetEnabledRequestSchema, {
                    participantIdentity: this.participantIdentity,
                    enabled: this.enabled,
                }),
            },
        });
        FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
    }
    setKeyIndex(keyIndex) {
        this.keyIndex = keyIndex;
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'cryptorSetKeyIndex',
                value: create(FrameCryptorSetKeyIndexRequestSchema, {
                    participantIdentity: this.participantIdentity,
                    keyIndex: this.keyIndex,
                }),
            },
        });
        FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
    }
}
export class E2EEManager {
    constructor(roomHandle, opts) {
        this.roomHandle = 0n;
        this.roomHandle = roomHandle;
        this.enabled = opts !== undefined;
        opts ?? (opts = defaultE2EEOptions);
        const options = { ...defaultE2EEOptions, ...opts };
        this.options = options;
        this.keyProvider = new KeyProvider(roomHandle, options.keyProviderOptions);
    }
    setEnabled(enabled) {
        this.enabled = enabled;
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'managerSetEnabled',
                value: create(E2eeManagerSetEnabledRequestSchema, {
                    enabled: this.enabled,
                }),
            },
        });
        FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
    }
    frameCryptors() {
        const req = create(E2eeRequestSchema, {
            roomHandle: this.roomHandle,
            message: {
                case: 'managerGetFrameCryptors',
                value: {},
            },
        });
        const res = FfiClient.instance.request({
            message: {
                case: 'e2ee',
                value: req,
            },
        });
        const frameCryptors = res.message.value.frameCryptors.map((cryptor) => new FrameCryptor(this.roomHandle, cryptor.participantIdentity, cryptor.keyIndex, cryptor.enabled));
        return frameCryptors;
    }
}
//# sourceMappingURL=e2ee.js.map