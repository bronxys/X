import type { AudioSource } from './audio_source.js';
import { FfiHandle } from './ffi_client.js';
import type { OwnedTrack, StreamState, TrackInfo, TrackKind } from './proto/track_pb.js';
import type { VideoSource } from './video_source.js';
export declare abstract class Track {
    /** @internal */
    info: TrackInfo;
    /** @internal */
    ffi_handle: FfiHandle;
    constructor(owned: OwnedTrack);
    get sid(): string;
    get name(): string;
    get kind(): TrackKind;
    get stream_state(): StreamState;
    get muted(): boolean;
}
export declare class LocalAudioTrack extends Track {
    constructor(owned: OwnedTrack);
    static createAudioTrack(name: string, source: AudioSource): LocalAudioTrack;
}
export declare class LocalVideoTrack extends Track {
    constructor(owned: OwnedTrack);
    static createVideoTrack(name: string, source: VideoSource): LocalVideoTrack;
}
export declare class RemoteVideoTrack extends Track {
    constructor(owned: OwnedTrack);
}
export declare class RemoteAudioTrack extends Track {
    constructor(owned: OwnedTrack);
}
export type LocalTrack = LocalVideoTrack | LocalAudioTrack;
export type RemoteTrack = RemoteVideoTrack | RemoteAudioTrack;
export type AudioTrack = LocalAudioTrack | RemoteAudioTrack;
export type VideoTrack = LocalVideoTrack | RemoteVideoTrack;
//# sourceMappingURL=track.d.ts.map