import { create } from '@bufbuild/protobuf';
import { AudioEncodingSchema, IceServerSchema, VideoEncodingSchema, } from './proto/room_pb.js';
import { TrackSource } from './proto/track_pb.js';
import { VideoCodec } from './proto/video_frame_pb.js';
export { Room, RoomEvent, ConnectError } from './room.js';
export { Participant, RemoteParticipant, LocalParticipant } from './participant.js';
export { Track, LocalAudioTrack, LocalVideoTrack, RemoteAudioTrack, RemoteVideoTrack, } from './track.js';
export { VideoFrame } from './video_frame.js';
export { AudioFrame, combineAudioFrames } from './audio_frame.js';
export { AudioStream } from './audio_stream.js';
export { AudioResampler, AudioResamplerQuality } from './audio_resampler.js';
export { VideoStream } from './video_stream.js';
export { AudioSource } from './audio_source.js';
export { VideoSource } from './video_source.js';
export { TrackPublication, RemoteTrackPublication, LocalTrackPublication, } from './track_publication.js';
export { E2EEManager, KeyProvider, FrameCryptor } from './e2ee.js';
export { ConnectionQuality, IceTransportType, DataPacketKind, ContinualGatheringPolicy, ConnectionState, } from './proto/room_pb.js';
export { RpcError } from './rpc.js';
export { EncryptionType, EncryptionState } from './proto/e2ee_pb.js';
export { StreamState, TrackKind, TrackSource } from './proto/track_pb.js';
export { VideoBufferType, VideoRotation, VideoCodec } from './proto/video_frame_pb.js';
export { ParticipantKind } from './proto/participant_pb.js';
export { dispose } from './ffi_client.js';
export class IceServer {
    constructor(init) {
        this.$typeName = 'livekit.proto.IceServer';
        const { urls, username, password } = init;
        this.urls = urls;
        this.username = username ?? '';
        this.password = password ?? '';
        create(IceServerSchema, init);
    }
}
export class TrackPublishOptions {
    constructor(init = {}) {
        this.$typeName = 'livekit.proto.TrackPublishOptions';
        const { videoCodec, videoEncoding, audioEncoding, dtx, simulcast, source, stream, red } = init;
        this.videoCodec = videoCodec ?? VideoCodec.VP8;
        if (videoEncoding) {
            this.videoEncoding = create(VideoEncodingSchema, videoEncoding);
        }
        if (audioEncoding) {
            this.audioEncoding = create(AudioEncodingSchema, audioEncoding);
        }
        this.dtx = dtx ?? false;
        this.simulcast = simulcast ?? false;
        this.source = source ?? TrackSource.SOURCE_UNKNOWN;
        this.stream = stream ?? '';
        this.red = red ?? false;
    }
}
//# sourceMappingURL=index.js.map