import type { MessageInitShape } from '@bufbuild/protobuf';
import type { AudioEncoding, TrackPublishOptionsSchema, VideoEncoding } from './proto/room_pb.js';
import { IceServerSchema, type IceServer as IceServerType, type TrackPublishOptions as TrackPublishOptionsType } from './proto/room_pb.js';
import { TrackSource } from './proto/track_pb.js';
import { VideoCodec } from './proto/video_frame_pb.js';
export { Room, RoomEvent, ConnectError, RoomOptions, RtcConfiguration } from './room.js';
export { Participant, RemoteParticipant, LocalParticipant } from './participant.js';
export { Track, LocalTrack, RemoteTrack, VideoTrack, LocalAudioTrack, LocalVideoTrack, RemoteAudioTrack, RemoteVideoTrack, AudioTrack, } from './track.js';
export { VideoFrame } from './video_frame.js';
export { AudioFrame, combineAudioFrames } from './audio_frame.js';
export { AudioStream } from './audio_stream.js';
export { AudioResampler, AudioResamplerQuality } from './audio_resampler.js';
export { VideoStream, VideoFrameEvent } from './video_stream.js';
export { AudioSource } from './audio_source.js';
export { VideoSource } from './video_source.js';
export { TrackPublication, RemoteTrackPublication, LocalTrackPublication, } from './track_publication.js';
export { Transcription, TranscriptionSegment } from './transcription.js';
export { E2EEManager, E2EEOptions, KeyProviderOptions, KeyProvider, FrameCryptor } from './e2ee.js';
export { ConnectionQuality, IceTransportType, DataPacketKind, ContinualGatheringPolicy, ConnectionState, } from './proto/room_pb.js';
export { RpcError, type RpcInvocationData, type PerformRpcParams } from './rpc.js';
export { EncryptionType, EncryptionState } from './proto/e2ee_pb.js';
export { StreamState, TrackKind, TrackSource } from './proto/track_pb.js';
export { VideoBufferType, VideoRotation, VideoCodec } from './proto/video_frame_pb.js';
export { ParticipantKind } from './proto/participant_pb.js';
export { dispose } from './ffi_client.js';
export type { ChatMessage } from './types.js';
type IceServerInit = MessageInitShape<typeof IceServerSchema> & {
    urls: string[];
};
export declare class IceServer implements IceServerType {
    $typeName: "livekit.proto.IceServer";
    urls: string[];
    username: string;
    password: string;
    constructor(init: IceServerInit);
}
export declare class TrackPublishOptions implements TrackPublishOptionsType {
    $typeName: "livekit.proto.TrackPublishOptions";
    videoCodec: VideoCodec;
    videoEncoding?: VideoEncoding | undefined;
    audioEncoding?: AudioEncoding | undefined;
    dtx: boolean;
    simulcast: boolean;
    source: TrackSource;
    stream: string;
    red: boolean;
    constructor(init?: MessageInitShape<typeof TrackPublishOptionsSchema>);
}
//# sourceMappingURL=index.d.ts.map