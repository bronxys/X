import { create, fromBinary, toBinary } from '@bufbuild/protobuf';
import EventEmitter from 'events';
import { FfiHandle, livekitCopyBuffer, livekitDispose, livekitFfiRequest, livekitInitialize, livekitRetrievePtr, } from './napi/native.js';
import { FfiEventSchema, FfiRequestSchema, FfiResponseSchema, } from './proto/ffi_pb.js';
import { SDK_VERSION } from './version.js';
export { FfiHandle, livekitDispose as dispose };
export var FfiClientEvent;
(function (FfiClientEvent) {
    FfiClientEvent["FfiEvent"] = "ffi_event";
})(FfiClientEvent || (FfiClientEvent = {}));
export class FfiClient extends EventEmitter {
    /** @internal */
    static get instance() {
        if (!FfiClient._client)
            FfiClient._client = new FfiClient();
        return FfiClient._client;
    }
    constructor() {
        super();
        this.setMaxListeners(0);
        livekitInitialize((event_data) => {
            const event = fromBinary(FfiEventSchema, event_data);
            this.emit(FfiClientEvent.FfiEvent, event);
        }, true, SDK_VERSION);
    }
    request(req) {
        const request = create(FfiRequestSchema, req);
        const req_data = toBinary(FfiRequestSchema, request);
        const res_data = livekitFfiRequest(req_data);
        return fromBinary(FfiResponseSchema, res_data).message.value;
    }
    copyBuffer(ptr, len) {
        return livekitCopyBuffer(ptr, len);
    }
    retrievePtr(data) {
        return livekitRetrievePtr(data);
    }
    async waitFor(predicate) {
        return new Promise((resolve) => {
            const listener = (ev) => {
                if (predicate(ev)) {
                    this.off(FfiClientEvent.FfiEvent, listener);
                    resolve(ev.message.value);
                }
            };
            this.on(FfiClientEvent.FfiEvent, listener);
        });
    }
}
//# sourceMappingURL=ffi_client.js.map