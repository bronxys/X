import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file e2ee.proto.
 */
export declare const file_e2ee: GenFile;
/**
 * @generated from message livekit.proto.FrameCryptor
 */
export type FrameCryptor = Message<"livekit.proto.FrameCryptor"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required string track_sid = 2;
     */
    trackSid: string;
    /**
     * @generated from field: required int32 key_index = 3;
     */
    keyIndex: number;
    /**
     * @generated from field: required bool enabled = 4;
     */
    enabled: boolean;
};
/**
 * Describes the message livekit.proto.FrameCryptor.
 * Use `create(FrameCryptorSchema)` to create a new message.
 */
export declare const FrameCryptorSchema: GenMessage<FrameCryptor>;
/**
 * @generated from message livekit.proto.KeyProviderOptions
 */
export type KeyProviderOptions = Message<"livekit.proto.KeyProviderOptions"> & {
    /**
     * Only specify if you want to use a shared_key
     *
     * @generated from field: optional bytes shared_key = 1;
     */
    sharedKey: Uint8Array;
    /**
     * @generated from field: required int32 ratchet_window_size = 2;
     */
    ratchetWindowSize: number;
    /**
     * @generated from field: required bytes ratchet_salt = 3;
     */
    ratchetSalt: Uint8Array;
    /**
     * -1 = no tolerance
     *
     * @generated from field: required int32 failure_tolerance = 4;
     */
    failureTolerance: number;
};
/**
 * Describes the message livekit.proto.KeyProviderOptions.
 * Use `create(KeyProviderOptionsSchema)` to create a new message.
 */
export declare const KeyProviderOptionsSchema: GenMessage<KeyProviderOptions>;
/**
 * @generated from message livekit.proto.E2eeOptions
 */
export type E2eeOptions = Message<"livekit.proto.E2eeOptions"> & {
    /**
     * @generated from field: required livekit.proto.EncryptionType encryption_type = 1;
     */
    encryptionType: EncryptionType;
    /**
     * @generated from field: required livekit.proto.KeyProviderOptions key_provider_options = 2;
     */
    keyProviderOptions?: KeyProviderOptions;
};
/**
 * Describes the message livekit.proto.E2eeOptions.
 * Use `create(E2eeOptionsSchema)` to create a new message.
 */
export declare const E2eeOptionsSchema: GenMessage<E2eeOptions>;
/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledRequest
 */
export type E2eeManagerSetEnabledRequest = Message<"livekit.proto.E2eeManagerSetEnabledRequest"> & {
    /**
     * @generated from field: required bool enabled = 1;
     */
    enabled: boolean;
};
/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledRequest.
 * Use `create(E2eeManagerSetEnabledRequestSchema)` to create a new message.
 */
export declare const E2eeManagerSetEnabledRequestSchema: GenMessage<E2eeManagerSetEnabledRequest>;
/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledResponse
 */
export type E2eeManagerSetEnabledResponse = Message<"livekit.proto.E2eeManagerSetEnabledResponse"> & {};
/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledResponse.
 * Use `create(E2eeManagerSetEnabledResponseSchema)` to create a new message.
 */
export declare const E2eeManagerSetEnabledResponseSchema: GenMessage<E2eeManagerSetEnabledResponse>;
/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsRequest
 */
export type E2eeManagerGetFrameCryptorsRequest = Message<"livekit.proto.E2eeManagerGetFrameCryptorsRequest"> & {};
/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsRequest.
 * Use `create(E2eeManagerGetFrameCryptorsRequestSchema)` to create a new message.
 */
export declare const E2eeManagerGetFrameCryptorsRequestSchema: GenMessage<E2eeManagerGetFrameCryptorsRequest>;
/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsResponse
 */
export type E2eeManagerGetFrameCryptorsResponse = Message<"livekit.proto.E2eeManagerGetFrameCryptorsResponse"> & {
    /**
     * @generated from field: repeated livekit.proto.FrameCryptor frame_cryptors = 1;
     */
    frameCryptors: FrameCryptor[];
};
/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsResponse.
 * Use `create(E2eeManagerGetFrameCryptorsResponseSchema)` to create a new message.
 */
export declare const E2eeManagerGetFrameCryptorsResponseSchema: GenMessage<E2eeManagerGetFrameCryptorsResponse>;
/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledRequest
 */
export type FrameCryptorSetEnabledRequest = Message<"livekit.proto.FrameCryptorSetEnabledRequest"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required string track_sid = 2;
     */
    trackSid: string;
    /**
     * @generated from field: required bool enabled = 3;
     */
    enabled: boolean;
};
/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledRequest.
 * Use `create(FrameCryptorSetEnabledRequestSchema)` to create a new message.
 */
export declare const FrameCryptorSetEnabledRequestSchema: GenMessage<FrameCryptorSetEnabledRequest>;
/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledResponse
 */
export type FrameCryptorSetEnabledResponse = Message<"livekit.proto.FrameCryptorSetEnabledResponse"> & {};
/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledResponse.
 * Use `create(FrameCryptorSetEnabledResponseSchema)` to create a new message.
 */
export declare const FrameCryptorSetEnabledResponseSchema: GenMessage<FrameCryptorSetEnabledResponse>;
/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexRequest
 */
export type FrameCryptorSetKeyIndexRequest = Message<"livekit.proto.FrameCryptorSetKeyIndexRequest"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required string track_sid = 2;
     */
    trackSid: string;
    /**
     * @generated from field: required int32 key_index = 3;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexRequest.
 * Use `create(FrameCryptorSetKeyIndexRequestSchema)` to create a new message.
 */
export declare const FrameCryptorSetKeyIndexRequestSchema: GenMessage<FrameCryptorSetKeyIndexRequest>;
/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexResponse
 */
export type FrameCryptorSetKeyIndexResponse = Message<"livekit.proto.FrameCryptorSetKeyIndexResponse"> & {};
/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexResponse.
 * Use `create(FrameCryptorSetKeyIndexResponseSchema)` to create a new message.
 */
export declare const FrameCryptorSetKeyIndexResponseSchema: GenMessage<FrameCryptorSetKeyIndexResponse>;
/**
 * @generated from message livekit.proto.SetSharedKeyRequest
 */
export type SetSharedKeyRequest = Message<"livekit.proto.SetSharedKeyRequest"> & {
    /**
     * @generated from field: required bytes shared_key = 1;
     */
    sharedKey: Uint8Array;
    /**
     * @generated from field: required int32 key_index = 2;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.SetSharedKeyRequest.
 * Use `create(SetSharedKeyRequestSchema)` to create a new message.
 */
export declare const SetSharedKeyRequestSchema: GenMessage<SetSharedKeyRequest>;
/**
 * @generated from message livekit.proto.SetSharedKeyResponse
 */
export type SetSharedKeyResponse = Message<"livekit.proto.SetSharedKeyResponse"> & {};
/**
 * Describes the message livekit.proto.SetSharedKeyResponse.
 * Use `create(SetSharedKeyResponseSchema)` to create a new message.
 */
export declare const SetSharedKeyResponseSchema: GenMessage<SetSharedKeyResponse>;
/**
 * @generated from message livekit.proto.RatchetSharedKeyRequest
 */
export type RatchetSharedKeyRequest = Message<"livekit.proto.RatchetSharedKeyRequest"> & {
    /**
     * @generated from field: required int32 key_index = 1;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.RatchetSharedKeyRequest.
 * Use `create(RatchetSharedKeyRequestSchema)` to create a new message.
 */
export declare const RatchetSharedKeyRequestSchema: GenMessage<RatchetSharedKeyRequest>;
/**
 * @generated from message livekit.proto.RatchetSharedKeyResponse
 */
export type RatchetSharedKeyResponse = Message<"livekit.proto.RatchetSharedKeyResponse"> & {
    /**
     * @generated from field: optional bytes new_key = 1;
     */
    newKey: Uint8Array;
};
/**
 * Describes the message livekit.proto.RatchetSharedKeyResponse.
 * Use `create(RatchetSharedKeyResponseSchema)` to create a new message.
 */
export declare const RatchetSharedKeyResponseSchema: GenMessage<RatchetSharedKeyResponse>;
/**
 * @generated from message livekit.proto.GetSharedKeyRequest
 */
export type GetSharedKeyRequest = Message<"livekit.proto.GetSharedKeyRequest"> & {
    /**
     * @generated from field: required int32 key_index = 1;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.GetSharedKeyRequest.
 * Use `create(GetSharedKeyRequestSchema)` to create a new message.
 */
export declare const GetSharedKeyRequestSchema: GenMessage<GetSharedKeyRequest>;
/**
 * @generated from message livekit.proto.GetSharedKeyResponse
 */
export type GetSharedKeyResponse = Message<"livekit.proto.GetSharedKeyResponse"> & {
    /**
     * @generated from field: optional bytes key = 1;
     */
    key: Uint8Array;
};
/**
 * Describes the message livekit.proto.GetSharedKeyResponse.
 * Use `create(GetSharedKeyResponseSchema)` to create a new message.
 */
export declare const GetSharedKeyResponseSchema: GenMessage<GetSharedKeyResponse>;
/**
 * @generated from message livekit.proto.SetKeyRequest
 */
export type SetKeyRequest = Message<"livekit.proto.SetKeyRequest"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required bytes key = 2;
     */
    key: Uint8Array;
    /**
     * @generated from field: required int32 key_index = 3;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.SetKeyRequest.
 * Use `create(SetKeyRequestSchema)` to create a new message.
 */
export declare const SetKeyRequestSchema: GenMessage<SetKeyRequest>;
/**
 * @generated from message livekit.proto.SetKeyResponse
 */
export type SetKeyResponse = Message<"livekit.proto.SetKeyResponse"> & {};
/**
 * Describes the message livekit.proto.SetKeyResponse.
 * Use `create(SetKeyResponseSchema)` to create a new message.
 */
export declare const SetKeyResponseSchema: GenMessage<SetKeyResponse>;
/**
 * @generated from message livekit.proto.RatchetKeyRequest
 */
export type RatchetKeyRequest = Message<"livekit.proto.RatchetKeyRequest"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required int32 key_index = 2;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.RatchetKeyRequest.
 * Use `create(RatchetKeyRequestSchema)` to create a new message.
 */
export declare const RatchetKeyRequestSchema: GenMessage<RatchetKeyRequest>;
/**
 * @generated from message livekit.proto.RatchetKeyResponse
 */
export type RatchetKeyResponse = Message<"livekit.proto.RatchetKeyResponse"> & {
    /**
     * @generated from field: optional bytes new_key = 1;
     */
    newKey: Uint8Array;
};
/**
 * Describes the message livekit.proto.RatchetKeyResponse.
 * Use `create(RatchetKeyResponseSchema)` to create a new message.
 */
export declare const RatchetKeyResponseSchema: GenMessage<RatchetKeyResponse>;
/**
 * @generated from message livekit.proto.GetKeyRequest
 */
export type GetKeyRequest = Message<"livekit.proto.GetKeyRequest"> & {
    /**
     * @generated from field: required string participant_identity = 1;
     */
    participantIdentity: string;
    /**
     * @generated from field: required int32 key_index = 2;
     */
    keyIndex: number;
};
/**
 * Describes the message livekit.proto.GetKeyRequest.
 * Use `create(GetKeyRequestSchema)` to create a new message.
 */
export declare const GetKeyRequestSchema: GenMessage<GetKeyRequest>;
/**
 * @generated from message livekit.proto.GetKeyResponse
 */
export type GetKeyResponse = Message<"livekit.proto.GetKeyResponse"> & {
    /**
     * @generated from field: optional bytes key = 1;
     */
    key: Uint8Array;
};
/**
 * Describes the message livekit.proto.GetKeyResponse.
 * Use `create(GetKeyResponseSchema)` to create a new message.
 */
export declare const GetKeyResponseSchema: GenMessage<GetKeyResponse>;
/**
 * @generated from message livekit.proto.E2eeRequest
 */
export type E2eeRequest = Message<"livekit.proto.E2eeRequest"> & {
    /**
     * @generated from field: required uint64 room_handle = 1;
     */
    roomHandle: bigint;
    /**
     * @generated from oneof livekit.proto.E2eeRequest.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.E2eeManagerSetEnabledRequest manager_set_enabled = 2;
         */
        value: E2eeManagerSetEnabledRequest;
        case: "managerSetEnabled";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsRequest manager_get_frame_cryptors = 3;
         */
        value: E2eeManagerGetFrameCryptorsRequest;
        case: "managerGetFrameCryptors";
    } | {
        /**
         * @generated from field: livekit.proto.FrameCryptorSetEnabledRequest cryptor_set_enabled = 4;
         */
        value: FrameCryptorSetEnabledRequest;
        case: "cryptorSetEnabled";
    } | {
        /**
         * @generated from field: livekit.proto.FrameCryptorSetKeyIndexRequest cryptor_set_key_index = 5;
         */
        value: FrameCryptorSetKeyIndexRequest;
        case: "cryptorSetKeyIndex";
    } | {
        /**
         * @generated from field: livekit.proto.SetSharedKeyRequest set_shared_key = 6;
         */
        value: SetSharedKeyRequest;
        case: "setSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.RatchetSharedKeyRequest ratchet_shared_key = 7;
         */
        value: RatchetSharedKeyRequest;
        case: "ratchetSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.GetSharedKeyRequest get_shared_key = 8;
         */
        value: GetSharedKeyRequest;
        case: "getSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.SetKeyRequest set_key = 9;
         */
        value: SetKeyRequest;
        case: "setKey";
    } | {
        /**
         * @generated from field: livekit.proto.RatchetKeyRequest ratchet_key = 10;
         */
        value: RatchetKeyRequest;
        case: "ratchetKey";
    } | {
        /**
         * @generated from field: livekit.proto.GetKeyRequest get_key = 11;
         */
        value: GetKeyRequest;
        case: "getKey";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.E2eeRequest.
 * Use `create(E2eeRequestSchema)` to create a new message.
 */
export declare const E2eeRequestSchema: GenMessage<E2eeRequest>;
/**
 * @generated from message livekit.proto.E2eeResponse
 */
export type E2eeResponse = Message<"livekit.proto.E2eeResponse"> & {
    /**
     * @generated from oneof livekit.proto.E2eeResponse.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.E2eeManagerSetEnabledResponse manager_set_enabled = 1;
         */
        value: E2eeManagerSetEnabledResponse;
        case: "managerSetEnabled";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsResponse manager_get_frame_cryptors = 2;
         */
        value: E2eeManagerGetFrameCryptorsResponse;
        case: "managerGetFrameCryptors";
    } | {
        /**
         * @generated from field: livekit.proto.FrameCryptorSetEnabledResponse cryptor_set_enabled = 3;
         */
        value: FrameCryptorSetEnabledResponse;
        case: "cryptorSetEnabled";
    } | {
        /**
         * @generated from field: livekit.proto.FrameCryptorSetKeyIndexResponse cryptor_set_key_index = 4;
         */
        value: FrameCryptorSetKeyIndexResponse;
        case: "cryptorSetKeyIndex";
    } | {
        /**
         * @generated from field: livekit.proto.SetSharedKeyResponse set_shared_key = 5;
         */
        value: SetSharedKeyResponse;
        case: "setSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.RatchetSharedKeyResponse ratchet_shared_key = 6;
         */
        value: RatchetSharedKeyResponse;
        case: "ratchetSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.GetSharedKeyResponse get_shared_key = 7;
         */
        value: GetSharedKeyResponse;
        case: "getSharedKey";
    } | {
        /**
         * @generated from field: livekit.proto.SetKeyResponse set_key = 8;
         */
        value: SetKeyResponse;
        case: "setKey";
    } | {
        /**
         * @generated from field: livekit.proto.RatchetKeyResponse ratchet_key = 9;
         */
        value: RatchetKeyResponse;
        case: "ratchetKey";
    } | {
        /**
         * @generated from field: livekit.proto.GetKeyResponse get_key = 10;
         */
        value: GetKeyResponse;
        case: "getKey";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.E2eeResponse.
 * Use `create(E2eeResponseSchema)` to create a new message.
 */
export declare const E2eeResponseSchema: GenMessage<E2eeResponse>;
/**
 * @generated from enum livekit.proto.EncryptionType
 */
export declare enum EncryptionType {
    /**
     * @generated from enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from enum value: GCM = 1;
     */
    GCM = 1,
    /**
     * @generated from enum value: CUSTOM = 2;
     */
    CUSTOM = 2
}
/**
 * Describes the enum livekit.proto.EncryptionType.
 */
export declare const EncryptionTypeSchema: GenEnum<EncryptionType>;
/**
 * @generated from enum livekit.proto.EncryptionState
 */
export declare enum EncryptionState {
    /**
     * @generated from enum value: NEW = 0;
     */
    NEW = 0,
    /**
     * @generated from enum value: OK = 1;
     */
    OK = 1,
    /**
     * @generated from enum value: ENCRYPTION_FAILED = 2;
     */
    ENCRYPTION_FAILED = 2,
    /**
     * @generated from enum value: DECRYPTION_FAILED = 3;
     */
    DECRYPTION_FAILED = 3,
    /**
     * @generated from enum value: MISSING_KEY = 4;
     */
    MISSING_KEY = 4,
    /**
     * @generated from enum value: KEY_RATCHETED = 5;
     */
    KEY_RATCHETED = 5,
    /**
     * @generated from enum value: INTERNAL_ERROR = 6;
     */
    INTERNAL_ERROR = 6
}
/**
 * Describes the enum livekit.proto.EncryptionState.
 */
export declare const EncryptionStateSchema: GenEnum<EncryptionState>;
//# sourceMappingURL=e2ee_pb.d.ts.map