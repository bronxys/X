// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
/**
 * Describes the file stats.proto.
 */
export const file_stats = /*@__PURE__*/ fileDesc("");
/**
 * Describes the message livekit.proto.RtcStats.
 * Use `create(RtcStatsSchema)` to create a new message.
 */
export const RtcStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 0);
/**
 * Describes the message livekit.proto.RtcStats.Codec.
 * Use `create(RtcStats_CodecSchema)` to create a new message.
 */
export const RtcStats_CodecSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 0);
/**
 * Describes the message livekit.proto.RtcStats.InboundRtp.
 * Use `create(RtcStats_InboundRtpSchema)` to create a new message.
 */
export const RtcStats_InboundRtpSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 1);
/**
 * Describes the message livekit.proto.RtcStats.OutboundRtp.
 * Use `create(RtcStats_OutboundRtpSchema)` to create a new message.
 */
export const RtcStats_OutboundRtpSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 2);
/**
 * Describes the message livekit.proto.RtcStats.RemoteInboundRtp.
 * Use `create(RtcStats_RemoteInboundRtpSchema)` to create a new message.
 */
export const RtcStats_RemoteInboundRtpSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 3);
/**
 * Describes the message livekit.proto.RtcStats.RemoteOutboundRtp.
 * Use `create(RtcStats_RemoteOutboundRtpSchema)` to create a new message.
 */
export const RtcStats_RemoteOutboundRtpSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 4);
/**
 * Describes the message livekit.proto.RtcStats.MediaSource.
 * Use `create(RtcStats_MediaSourceSchema)` to create a new message.
 */
export const RtcStats_MediaSourceSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 5);
/**
 * Describes the message livekit.proto.RtcStats.MediaPlayout.
 * Use `create(RtcStats_MediaPlayoutSchema)` to create a new message.
 */
export const RtcStats_MediaPlayoutSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 6);
/**
 * Describes the message livekit.proto.RtcStats.PeerConnection.
 * Use `create(RtcStats_PeerConnectionSchema)` to create a new message.
 */
export const RtcStats_PeerConnectionSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 7);
/**
 * Describes the message livekit.proto.RtcStats.DataChannel.
 * Use `create(RtcStats_DataChannelSchema)` to create a new message.
 */
export const RtcStats_DataChannelSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 8);
/**
 * Describes the message livekit.proto.RtcStats.Transport.
 * Use `create(RtcStats_TransportSchema)` to create a new message.
 */
export const RtcStats_TransportSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 9);
/**
 * Describes the message livekit.proto.RtcStats.CandidatePair.
 * Use `create(RtcStats_CandidatePairSchema)` to create a new message.
 */
export const RtcStats_CandidatePairSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 10);
/**
 * Describes the message livekit.proto.RtcStats.LocalCandidate.
 * Use `create(RtcStats_LocalCandidateSchema)` to create a new message.
 */
export const RtcStats_LocalCandidateSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 11);
/**
 * Describes the message livekit.proto.RtcStats.RemoteCandidate.
 * Use `create(RtcStats_RemoteCandidateSchema)` to create a new message.
 */
export const RtcStats_RemoteCandidateSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 12);
/**
 * Describes the message livekit.proto.RtcStats.Certificate.
 * Use `create(RtcStats_CertificateSchema)` to create a new message.
 */
export const RtcStats_CertificateSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 13);
/**
 * Describes the message livekit.proto.RtcStats.Track.
 * Use `create(RtcStats_TrackSchema)` to create a new message.
 */
export const RtcStats_TrackSchema = /*@__PURE__*/ messageDesc(file_stats, 0, 14);
/**
 * Describes the message livekit.proto.RtcStatsData.
 * Use `create(RtcStatsDataSchema)` to create a new message.
 */
export const RtcStatsDataSchema = /*@__PURE__*/ messageDesc(file_stats, 1);
/**
 * Describes the message livekit.proto.CodecStats.
 * Use `create(CodecStatsSchema)` to create a new message.
 */
export const CodecStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 2);
/**
 * Describes the message livekit.proto.RtpStreamStats.
 * Use `create(RtpStreamStatsSchema)` to create a new message.
 */
export const RtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 3);
/**
 * Describes the message livekit.proto.ReceivedRtpStreamStats.
 * Use `create(ReceivedRtpStreamStatsSchema)` to create a new message.
 */
export const ReceivedRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 4);
/**
 * Describes the message livekit.proto.InboundRtpStreamStats.
 * Use `create(InboundRtpStreamStatsSchema)` to create a new message.
 */
export const InboundRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 5);
/**
 * Describes the message livekit.proto.SentRtpStreamStats.
 * Use `create(SentRtpStreamStatsSchema)` to create a new message.
 */
export const SentRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 6);
/**
 * Describes the message livekit.proto.OutboundRtpStreamStats.
 * Use `create(OutboundRtpStreamStatsSchema)` to create a new message.
 */
export const OutboundRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 7);
/**
 * Describes the message livekit.proto.RemoteInboundRtpStreamStats.
 * Use `create(RemoteInboundRtpStreamStatsSchema)` to create a new message.
 */
export const RemoteInboundRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 8);
/**
 * Describes the message livekit.proto.RemoteOutboundRtpStreamStats.
 * Use `create(RemoteOutboundRtpStreamStatsSchema)` to create a new message.
 */
export const RemoteOutboundRtpStreamStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 9);
/**
 * Describes the message livekit.proto.MediaSourceStats.
 * Use `create(MediaSourceStatsSchema)` to create a new message.
 */
export const MediaSourceStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 10);
/**
 * Describes the message livekit.proto.AudioSourceStats.
 * Use `create(AudioSourceStatsSchema)` to create a new message.
 */
export const AudioSourceStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 11);
/**
 * Describes the message livekit.proto.VideoSourceStats.
 * Use `create(VideoSourceStatsSchema)` to create a new message.
 */
export const VideoSourceStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 12);
/**
 * Describes the message livekit.proto.AudioPlayoutStats.
 * Use `create(AudioPlayoutStatsSchema)` to create a new message.
 */
export const AudioPlayoutStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 13);
/**
 * Describes the message livekit.proto.PeerConnectionStats.
 * Use `create(PeerConnectionStatsSchema)` to create a new message.
 */
export const PeerConnectionStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 14);
/**
 * Describes the message livekit.proto.DataChannelStats.
 * Use `create(DataChannelStatsSchema)` to create a new message.
 */
export const DataChannelStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 15);
/**
 * Describes the message livekit.proto.TransportStats.
 * Use `create(TransportStatsSchema)` to create a new message.
 */
export const TransportStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 16);
/**
 * Describes the message livekit.proto.CandidatePairStats.
 * Use `create(CandidatePairStatsSchema)` to create a new message.
 */
export const CandidatePairStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 17);
/**
 * Describes the message livekit.proto.IceCandidateStats.
 * Use `create(IceCandidateStatsSchema)` to create a new message.
 */
export const IceCandidateStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 18);
/**
 * Describes the message livekit.proto.CertificateStats.
 * Use `create(CertificateStatsSchema)` to create a new message.
 */
export const CertificateStatsSchema = /*@__PURE__*/ messageDesc(file_stats, 19);
/**
 * @generated from enum livekit.proto.DataChannelState
 */
export var DataChannelState;
(function (DataChannelState) {
    /**
     * @generated from enum value: DC_CONNECTING = 0;
     */
    DataChannelState[DataChannelState["DC_CONNECTING"] = 0] = "DC_CONNECTING";
    /**
     * @generated from enum value: DC_OPEN = 1;
     */
    DataChannelState[DataChannelState["DC_OPEN"] = 1] = "DC_OPEN";
    /**
     * @generated from enum value: DC_CLOSING = 2;
     */
    DataChannelState[DataChannelState["DC_CLOSING"] = 2] = "DC_CLOSING";
    /**
     * @generated from enum value: DC_CLOSED = 3;
     */
    DataChannelState[DataChannelState["DC_CLOSED"] = 3] = "DC_CLOSED";
})(DataChannelState || (DataChannelState = {}));
/**
 * Describes the enum livekit.proto.DataChannelState.
 */
export const DataChannelStateSchema = /*@__PURE__*/ enumDesc(file_stats, 0);
/**
 * @generated from enum livekit.proto.QualityLimitationReason
 */
export var QualityLimitationReason;
(function (QualityLimitationReason) {
    /**
     * @generated from enum value: LIMITATION_NONE = 0;
     */
    QualityLimitationReason[QualityLimitationReason["LIMITATION_NONE"] = 0] = "LIMITATION_NONE";
    /**
     * @generated from enum value: LIMITATION_CPU = 1;
     */
    QualityLimitationReason[QualityLimitationReason["LIMITATION_CPU"] = 1] = "LIMITATION_CPU";
    /**
     * @generated from enum value: LIMITATION_BANDWIDTH = 2;
     */
    QualityLimitationReason[QualityLimitationReason["LIMITATION_BANDWIDTH"] = 2] = "LIMITATION_BANDWIDTH";
    /**
     * @generated from enum value: LIMITATION_OTHER = 3;
     */
    QualityLimitationReason[QualityLimitationReason["LIMITATION_OTHER"] = 3] = "LIMITATION_OTHER";
})(QualityLimitationReason || (QualityLimitationReason = {}));
/**
 * Describes the enum livekit.proto.QualityLimitationReason.
 */
export const QualityLimitationReasonSchema = /*@__PURE__*/ enumDesc(file_stats, 1);
/**
 * @generated from enum livekit.proto.IceRole
 */
export var IceRole;
(function (IceRole) {
    /**
     * @generated from enum value: ICE_UNKNOWN = 0;
     */
    IceRole[IceRole["ICE_UNKNOWN"] = 0] = "ICE_UNKNOWN";
    /**
     * @generated from enum value: ICE_CONTROLLING = 1;
     */
    IceRole[IceRole["ICE_CONTROLLING"] = 1] = "ICE_CONTROLLING";
    /**
     * @generated from enum value: ICE_CONTROLLED = 2;
     */
    IceRole[IceRole["ICE_CONTROLLED"] = 2] = "ICE_CONTROLLED";
})(IceRole || (IceRole = {}));
/**
 * Describes the enum livekit.proto.IceRole.
 */
export const IceRoleSchema = /*@__PURE__*/ enumDesc(file_stats, 2);
/**
 * @generated from enum livekit.proto.DtlsTransportState
 */
export var DtlsTransportState;
(function (DtlsTransportState) {
    /**
     * @generated from enum value: DTLS_TRANSPORT_NEW = 0;
     */
    DtlsTransportState[DtlsTransportState["DTLS_TRANSPORT_NEW"] = 0] = "DTLS_TRANSPORT_NEW";
    /**
     * @generated from enum value: DTLS_TRANSPORT_CONNECTING = 1;
     */
    DtlsTransportState[DtlsTransportState["DTLS_TRANSPORT_CONNECTING"] = 1] = "DTLS_TRANSPORT_CONNECTING";
    /**
     * @generated from enum value: DTLS_TRANSPORT_CONNECTED = 2;
     */
    DtlsTransportState[DtlsTransportState["DTLS_TRANSPORT_CONNECTED"] = 2] = "DTLS_TRANSPORT_CONNECTED";
    /**
     * @generated from enum value: DTLS_TRANSPORT_CLOSED = 3;
     */
    DtlsTransportState[DtlsTransportState["DTLS_TRANSPORT_CLOSED"] = 3] = "DTLS_TRANSPORT_CLOSED";
    /**
     * @generated from enum value: DTLS_TRANSPORT_FAILED = 4;
     */
    DtlsTransportState[DtlsTransportState["DTLS_TRANSPORT_FAILED"] = 4] = "DTLS_TRANSPORT_FAILED";
})(DtlsTransportState || (DtlsTransportState = {}));
/**
 * Describes the enum livekit.proto.DtlsTransportState.
 */
export const DtlsTransportStateSchema = /*@__PURE__*/ enumDesc(file_stats, 3);
/**
 * @generated from enum livekit.proto.IceTransportState
 */
export var IceTransportState;
(function (IceTransportState) {
    /**
     * @generated from enum value: ICE_TRANSPORT_NEW = 0;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_NEW"] = 0] = "ICE_TRANSPORT_NEW";
    /**
     * @generated from enum value: ICE_TRANSPORT_CHECKING = 1;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_CHECKING"] = 1] = "ICE_TRANSPORT_CHECKING";
    /**
     * @generated from enum value: ICE_TRANSPORT_CONNECTED = 2;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_CONNECTED"] = 2] = "ICE_TRANSPORT_CONNECTED";
    /**
     * @generated from enum value: ICE_TRANSPORT_COMPLETED = 3;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_COMPLETED"] = 3] = "ICE_TRANSPORT_COMPLETED";
    /**
     * @generated from enum value: ICE_TRANSPORT_DISCONNECTED = 4;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_DISCONNECTED"] = 4] = "ICE_TRANSPORT_DISCONNECTED";
    /**
     * @generated from enum value: ICE_TRANSPORT_FAILED = 5;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_FAILED"] = 5] = "ICE_TRANSPORT_FAILED";
    /**
     * @generated from enum value: ICE_TRANSPORT_CLOSED = 6;
     */
    IceTransportState[IceTransportState["ICE_TRANSPORT_CLOSED"] = 6] = "ICE_TRANSPORT_CLOSED";
})(IceTransportState || (IceTransportState = {}));
/**
 * Describes the enum livekit.proto.IceTransportState.
 */
export const IceTransportStateSchema = /*@__PURE__*/ enumDesc(file_stats, 4);
/**
 * @generated from enum livekit.proto.DtlsRole
 */
export var DtlsRole;
(function (DtlsRole) {
    /**
     * @generated from enum value: DTLS_CLIENT = 0;
     */
    DtlsRole[DtlsRole["DTLS_CLIENT"] = 0] = "DTLS_CLIENT";
    /**
     * @generated from enum value: DTLS_SERVER = 1;
     */
    DtlsRole[DtlsRole["DTLS_SERVER"] = 1] = "DTLS_SERVER";
    /**
     * @generated from enum value: DTLS_UNKNOWN = 2;
     */
    DtlsRole[DtlsRole["DTLS_UNKNOWN"] = 2] = "DTLS_UNKNOWN";
})(DtlsRole || (DtlsRole = {}));
/**
 * Describes the enum livekit.proto.DtlsRole.
 */
export const DtlsRoleSchema = /*@__PURE__*/ enumDesc(file_stats, 5);
/**
 * @generated from enum livekit.proto.IceCandidatePairState
 */
export var IceCandidatePairState;
(function (IceCandidatePairState) {
    /**
     * @generated from enum value: PAIR_FROZEN = 0;
     */
    IceCandidatePairState[IceCandidatePairState["PAIR_FROZEN"] = 0] = "PAIR_FROZEN";
    /**
     * @generated from enum value: PAIR_WAITING = 1;
     */
    IceCandidatePairState[IceCandidatePairState["PAIR_WAITING"] = 1] = "PAIR_WAITING";
    /**
     * @generated from enum value: PAIR_IN_PROGRESS = 2;
     */
    IceCandidatePairState[IceCandidatePairState["PAIR_IN_PROGRESS"] = 2] = "PAIR_IN_PROGRESS";
    /**
     * @generated from enum value: PAIR_FAILED = 3;
     */
    IceCandidatePairState[IceCandidatePairState["PAIR_FAILED"] = 3] = "PAIR_FAILED";
    /**
     * @generated from enum value: PAIR_SUCCEEDED = 4;
     */
    IceCandidatePairState[IceCandidatePairState["PAIR_SUCCEEDED"] = 4] = "PAIR_SUCCEEDED";
})(IceCandidatePairState || (IceCandidatePairState = {}));
/**
 * Describes the enum livekit.proto.IceCandidatePairState.
 */
export const IceCandidatePairStateSchema = /*@__PURE__*/ enumDesc(file_stats, 6);
/**
 * @generated from enum livekit.proto.IceCandidateType
 */
export var IceCandidateType;
(function (IceCandidateType) {
    /**
     * @generated from enum value: HOST = 0;
     */
    IceCandidateType[IceCandidateType["HOST"] = 0] = "HOST";
    /**
     * @generated from enum value: SRFLX = 1;
     */
    IceCandidateType[IceCandidateType["SRFLX"] = 1] = "SRFLX";
    /**
     * @generated from enum value: PRFLX = 2;
     */
    IceCandidateType[IceCandidateType["PRFLX"] = 2] = "PRFLX";
    /**
     * @generated from enum value: RELAY = 3;
     */
    IceCandidateType[IceCandidateType["RELAY"] = 3] = "RELAY";
})(IceCandidateType || (IceCandidateType = {}));
/**
 * Describes the enum livekit.proto.IceCandidateType.
 */
export const IceCandidateTypeSchema = /*@__PURE__*/ enumDesc(file_stats, 7);
/**
 * @generated from enum livekit.proto.IceServerTransportProtocol
 */
export var IceServerTransportProtocol;
(function (IceServerTransportProtocol) {
    /**
     * @generated from enum value: TRANSPORT_UDP = 0;
     */
    IceServerTransportProtocol[IceServerTransportProtocol["TRANSPORT_UDP"] = 0] = "TRANSPORT_UDP";
    /**
     * @generated from enum value: TRANSPORT_TCP = 1;
     */
    IceServerTransportProtocol[IceServerTransportProtocol["TRANSPORT_TCP"] = 1] = "TRANSPORT_TCP";
    /**
     * @generated from enum value: TRANSPORT_TLS = 2;
     */
    IceServerTransportProtocol[IceServerTransportProtocol["TRANSPORT_TLS"] = 2] = "TRANSPORT_TLS";
})(IceServerTransportProtocol || (IceServerTransportProtocol = {}));
/**
 * Describes the enum livekit.proto.IceServerTransportProtocol.
 */
export const IceServerTransportProtocolSchema = /*@__PURE__*/ enumDesc(file_stats, 8);
/**
 * @generated from enum livekit.proto.IceTcpCandidateType
 */
export var IceTcpCandidateType;
(function (IceTcpCandidateType) {
    /**
     * @generated from enum value: CANDIDATE_ACTIVE = 0;
     */
    IceTcpCandidateType[IceTcpCandidateType["CANDIDATE_ACTIVE"] = 0] = "CANDIDATE_ACTIVE";
    /**
     * @generated from enum value: CANDIDATE_PASSIVE = 1;
     */
    IceTcpCandidateType[IceTcpCandidateType["CANDIDATE_PASSIVE"] = 1] = "CANDIDATE_PASSIVE";
    /**
     * @generated from enum value: CANDIDATE_SO = 2;
     */
    IceTcpCandidateType[IceTcpCandidateType["CANDIDATE_SO"] = 2] = "CANDIDATE_SO";
})(IceTcpCandidateType || (IceTcpCandidateType = {}));
/**
 * Describes the enum livekit.proto.IceTcpCandidateType.
 */
export const IceTcpCandidateTypeSchema = /*@__PURE__*/ enumDesc(file_stats, 9);
//# sourceMappingURL=stats_pb.js.map