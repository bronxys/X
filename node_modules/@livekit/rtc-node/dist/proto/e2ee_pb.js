// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
/**
 * Describes the file e2ee.proto.
 */
export const file_e2ee = /*@__PURE__*/ fileDesc("CgplMmVlLnByb3RvEg1saXZla2l0LnByb3RvImMKDEZyYW1lQ3J5cHRvchIcChRwYXJ0aWNpcGFudF9pZGVudGl0eRgBIAIoCRIRCgl0cmFja19zaWQYAiACKAkSEQoJa2V5X2luZGV4GAMgAigFEg8KB2VuYWJsZWQYBCACKAgidgoSS2V5UHJvdmlkZXJPcHRpb25zEhIKCnNoYXJlZF9rZXkYASABKAwSGwoTcmF0Y2hldF93aW5kb3dfc2l6ZRgCIAIoBRIUCgxyYXRjaGV0X3NhbHQYAyACKAwSGQoRZmFpbHVyZV90b2xlcmFuY2UYBCACKAUihgEKC0UyZWVPcHRpb25zEjYKD2VuY3J5cHRpb25fdHlwZRgBIAIoDjIdLmxpdmVraXQucHJvdG8uRW5jcnlwdGlvblR5cGUSPwoUa2V5X3Byb3ZpZGVyX29wdGlvbnMYAiACKAsyIS5saXZla2l0LnByb3RvLktleVByb3ZpZGVyT3B0aW9ucyIvChxFMmVlTWFuYWdlclNldEVuYWJsZWRSZXF1ZXN0Eg8KB2VuYWJsZWQYASACKAgiHwodRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVzcG9uc2UiJAoiRTJlZU1hbmFnZXJHZXRGcmFtZUNyeXB0b3JzUmVxdWVzdCJaCiNFMmVlTWFuYWdlckdldEZyYW1lQ3J5cHRvcnNSZXNwb25zZRIzCg5mcmFtZV9jcnlwdG9ycxgBIAMoCzIbLmxpdmVraXQucHJvdG8uRnJhbWVDcnlwdG9yImEKHUZyYW1lQ3J5cHRvclNldEVuYWJsZWRSZXF1ZXN0EhwKFHBhcnRpY2lwYW50X2lkZW50aXR5GAEgAigJEhEKCXRyYWNrX3NpZBgCIAIoCRIPCgdlbmFibGVkGAMgAigIIiAKHkZyYW1lQ3J5cHRvclNldEVuYWJsZWRSZXNwb25zZSJkCh5GcmFtZUNyeXB0b3JTZXRLZXlJbmRleFJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJdHJhY2tfc2lkGAIgAigJEhEKCWtleV9pbmRleBgDIAIoBSIhCh9GcmFtZUNyeXB0b3JTZXRLZXlJbmRleFJlc3BvbnNlIjwKE1NldFNoYXJlZEtleVJlcXVlc3QSEgoKc2hhcmVkX2tleRgBIAIoDBIRCglrZXlfaW5kZXgYAiACKAUiFgoUU2V0U2hhcmVkS2V5UmVzcG9uc2UiLAoXUmF0Y2hldFNoYXJlZEtleVJlcXVlc3QSEQoJa2V5X2luZGV4GAEgAigFIisKGFJhdGNoZXRTaGFyZWRLZXlSZXNwb25zZRIPCgduZXdfa2V5GAEgASgMIigKE0dldFNoYXJlZEtleVJlcXVlc3QSEQoJa2V5X2luZGV4GAEgAigFIiMKFEdldFNoYXJlZEtleVJlc3BvbnNlEgsKA2tleRgBIAEoDCJNCg1TZXRLZXlSZXF1ZXN0EhwKFHBhcnRpY2lwYW50X2lkZW50aXR5GAEgAigJEgsKA2tleRgCIAIoDBIRCglrZXlfaW5kZXgYAyACKAUiEAoOU2V0S2V5UmVzcG9uc2UiRAoRUmF0Y2hldEtleVJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJa2V5X2luZGV4GAIgAigFIiUKElJhdGNoZXRLZXlSZXNwb25zZRIPCgduZXdfa2V5GAEgASgMIkAKDUdldEtleVJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJa2V5X2luZGV4GAIgAigFIh0KDkdldEtleVJlc3BvbnNlEgsKA2tleRgBIAEoDCLMBQoLRTJlZVJlcXVlc3QSEwoLcm9vbV9oYW5kbGUYASACKAQSSgoTbWFuYWdlcl9zZXRfZW5hYmxlZBgCIAEoCzIrLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVxdWVzdEgAElcKGm1hbmFnZXJfZ2V0X2ZyYW1lX2NyeXB0b3JzGAMgASgLMjEubGl2ZWtpdC5wcm90by5FMmVlTWFuYWdlckdldEZyYW1lQ3J5cHRvcnNSZXF1ZXN0SAASSwoTY3J5cHRvcl9zZXRfZW5hYmxlZBgEIAEoCzIsLmxpdmVraXQucHJvdG8uRnJhbWVDcnlwdG9yU2V0RW5hYmxlZFJlcXVlc3RIABJOChVjcnlwdG9yX3NldF9rZXlfaW5kZXgYBSABKAsyLS5saXZla2l0LnByb3RvLkZyYW1lQ3J5cHRvclNldEtleUluZGV4UmVxdWVzdEgAEjwKDnNldF9zaGFyZWRfa2V5GAYgASgLMiIubGl2ZWtpdC5wcm90by5TZXRTaGFyZWRLZXlSZXF1ZXN0SAASRAoScmF0Y2hldF9zaGFyZWRfa2V5GAcgASgLMiYubGl2ZWtpdC5wcm90by5SYXRjaGV0U2hhcmVkS2V5UmVxdWVzdEgAEjwKDmdldF9zaGFyZWRfa2V5GAggASgLMiIubGl2ZWtpdC5wcm90by5HZXRTaGFyZWRLZXlSZXF1ZXN0SAASLwoHc2V0X2tleRgJIAEoCzIcLmxpdmVraXQucHJvdG8uU2V0S2V5UmVxdWVzdEgAEjcKC3JhdGNoZXRfa2V5GAogASgLMiAubGl2ZWtpdC5wcm90by5SYXRjaGV0S2V5UmVxdWVzdEgAEi8KB2dldF9rZXkYCyABKAsyHC5saXZla2l0LnByb3RvLkdldEtleVJlcXVlc3RIAEIJCgdtZXNzYWdlIsIFCgxFMmVlUmVzcG9uc2USSwoTbWFuYWdlcl9zZXRfZW5hYmxlZBgBIAEoCzIsLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVzcG9uc2VIABJYChptYW5hZ2VyX2dldF9mcmFtZV9jcnlwdG9ycxgCIAEoCzIyLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJHZXRGcmFtZUNyeXB0b3JzUmVzcG9uc2VIABJMChNjcnlwdG9yX3NldF9lbmFibGVkGAMgASgLMi0ubGl2ZWtpdC5wcm90by5GcmFtZUNyeXB0b3JTZXRFbmFibGVkUmVzcG9uc2VIABJPChVjcnlwdG9yX3NldF9rZXlfaW5kZXgYBCABKAsyLi5saXZla2l0LnByb3RvLkZyYW1lQ3J5cHRvclNldEtleUluZGV4UmVzcG9uc2VIABI9Cg5zZXRfc2hhcmVkX2tleRgFIAEoCzIjLmxpdmVraXQucHJvdG8uU2V0U2hhcmVkS2V5UmVzcG9uc2VIABJFChJyYXRjaGV0X3NoYXJlZF9rZXkYBiABKAsyJy5saXZla2l0LnByb3RvLlJhdGNoZXRTaGFyZWRLZXlSZXNwb25zZUgAEj0KDmdldF9zaGFyZWRfa2V5GAcgASgLMiMubGl2ZWtpdC5wcm90by5HZXRTaGFyZWRLZXlSZXNwb25zZUgAEjAKB3NldF9rZXkYCCABKAsyHS5saXZla2l0LnByb3RvLlNldEtleVJlc3BvbnNlSAASOAoLcmF0Y2hldF9rZXkYCSABKAsyIS5saXZla2l0LnByb3RvLlJhdGNoZXRLZXlSZXNwb25zZUgAEjAKB2dldF9rZXkYCiABKAsyHS5saXZla2l0LnByb3RvLkdldEtleVJlc3BvbnNlSABCCQoHbWVzc2FnZSovCg5FbmNyeXB0aW9uVHlwZRIICgROT05FEAASBwoDR0NNEAESCgoGQ1VTVE9NEAIqiAEKD0VuY3J5cHRpb25TdGF0ZRIHCgNORVcQABIGCgJPSxABEhUKEUVOQ1JZUFRJT05fRkFJTEVEEAISFQoRREVDUllQVElPTl9GQUlMRUQQAxIPCgtNSVNTSU5HX0tFWRAEEhEKDUtFWV9SQVRDSEVURUQQBRISCg5JTlRFUk5BTF9FUlJPUhAGQhCqAg1MaXZlS2l0LlByb3Rv");
/**
 * Describes the message livekit.proto.FrameCryptor.
 * Use `create(FrameCryptorSchema)` to create a new message.
 */
export const FrameCryptorSchema = /*@__PURE__*/ messageDesc(file_e2ee, 0);
/**
 * Describes the message livekit.proto.KeyProviderOptions.
 * Use `create(KeyProviderOptionsSchema)` to create a new message.
 */
export const KeyProviderOptionsSchema = /*@__PURE__*/ messageDesc(file_e2ee, 1);
/**
 * Describes the message livekit.proto.E2eeOptions.
 * Use `create(E2eeOptionsSchema)` to create a new message.
 */
export const E2eeOptionsSchema = /*@__PURE__*/ messageDesc(file_e2ee, 2);
/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledRequest.
 * Use `create(E2eeManagerSetEnabledRequestSchema)` to create a new message.
 */
export const E2eeManagerSetEnabledRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 3);
/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledResponse.
 * Use `create(E2eeManagerSetEnabledResponseSchema)` to create a new message.
 */
export const E2eeManagerSetEnabledResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 4);
/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsRequest.
 * Use `create(E2eeManagerGetFrameCryptorsRequestSchema)` to create a new message.
 */
export const E2eeManagerGetFrameCryptorsRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 5);
/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsResponse.
 * Use `create(E2eeManagerGetFrameCryptorsResponseSchema)` to create a new message.
 */
export const E2eeManagerGetFrameCryptorsResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 6);
/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledRequest.
 * Use `create(FrameCryptorSetEnabledRequestSchema)` to create a new message.
 */
export const FrameCryptorSetEnabledRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 7);
/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledResponse.
 * Use `create(FrameCryptorSetEnabledResponseSchema)` to create a new message.
 */
export const FrameCryptorSetEnabledResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 8);
/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexRequest.
 * Use `create(FrameCryptorSetKeyIndexRequestSchema)` to create a new message.
 */
export const FrameCryptorSetKeyIndexRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 9);
/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexResponse.
 * Use `create(FrameCryptorSetKeyIndexResponseSchema)` to create a new message.
 */
export const FrameCryptorSetKeyIndexResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 10);
/**
 * Describes the message livekit.proto.SetSharedKeyRequest.
 * Use `create(SetSharedKeyRequestSchema)` to create a new message.
 */
export const SetSharedKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 11);
/**
 * Describes the message livekit.proto.SetSharedKeyResponse.
 * Use `create(SetSharedKeyResponseSchema)` to create a new message.
 */
export const SetSharedKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 12);
/**
 * Describes the message livekit.proto.RatchetSharedKeyRequest.
 * Use `create(RatchetSharedKeyRequestSchema)` to create a new message.
 */
export const RatchetSharedKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 13);
/**
 * Describes the message livekit.proto.RatchetSharedKeyResponse.
 * Use `create(RatchetSharedKeyResponseSchema)` to create a new message.
 */
export const RatchetSharedKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 14);
/**
 * Describes the message livekit.proto.GetSharedKeyRequest.
 * Use `create(GetSharedKeyRequestSchema)` to create a new message.
 */
export const GetSharedKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 15);
/**
 * Describes the message livekit.proto.GetSharedKeyResponse.
 * Use `create(GetSharedKeyResponseSchema)` to create a new message.
 */
export const GetSharedKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 16);
/**
 * Describes the message livekit.proto.SetKeyRequest.
 * Use `create(SetKeyRequestSchema)` to create a new message.
 */
export const SetKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 17);
/**
 * Describes the message livekit.proto.SetKeyResponse.
 * Use `create(SetKeyResponseSchema)` to create a new message.
 */
export const SetKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 18);
/**
 * Describes the message livekit.proto.RatchetKeyRequest.
 * Use `create(RatchetKeyRequestSchema)` to create a new message.
 */
export const RatchetKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 19);
/**
 * Describes the message livekit.proto.RatchetKeyResponse.
 * Use `create(RatchetKeyResponseSchema)` to create a new message.
 */
export const RatchetKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 20);
/**
 * Describes the message livekit.proto.GetKeyRequest.
 * Use `create(GetKeyRequestSchema)` to create a new message.
 */
export const GetKeyRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 21);
/**
 * Describes the message livekit.proto.GetKeyResponse.
 * Use `create(GetKeyResponseSchema)` to create a new message.
 */
export const GetKeyResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 22);
/**
 * Describes the message livekit.proto.E2eeRequest.
 * Use `create(E2eeRequestSchema)` to create a new message.
 */
export const E2eeRequestSchema = /*@__PURE__*/ messageDesc(file_e2ee, 23);
/**
 * Describes the message livekit.proto.E2eeResponse.
 * Use `create(E2eeResponseSchema)` to create a new message.
 */
export const E2eeResponseSchema = /*@__PURE__*/ messageDesc(file_e2ee, 24);
/**
 * @generated from enum livekit.proto.EncryptionType
 */
export var EncryptionType;
(function (EncryptionType) {
    /**
     * @generated from enum value: NONE = 0;
     */
    EncryptionType[EncryptionType["NONE"] = 0] = "NONE";
    /**
     * @generated from enum value: GCM = 1;
     */
    EncryptionType[EncryptionType["GCM"] = 1] = "GCM";
    /**
     * @generated from enum value: CUSTOM = 2;
     */
    EncryptionType[EncryptionType["CUSTOM"] = 2] = "CUSTOM";
})(EncryptionType || (EncryptionType = {}));
/**
 * Describes the enum livekit.proto.EncryptionType.
 */
export const EncryptionTypeSchema = /*@__PURE__*/ enumDesc(file_e2ee, 0);
/**
 * @generated from enum livekit.proto.EncryptionState
 */
export var EncryptionState;
(function (EncryptionState) {
    /**
     * @generated from enum value: NEW = 0;
     */
    EncryptionState[EncryptionState["NEW"] = 0] = "NEW";
    /**
     * @generated from enum value: OK = 1;
     */
    EncryptionState[EncryptionState["OK"] = 1] = "OK";
    /**
     * @generated from enum value: ENCRYPTION_FAILED = 2;
     */
    EncryptionState[EncryptionState["ENCRYPTION_FAILED"] = 2] = "ENCRYPTION_FAILED";
    /**
     * @generated from enum value: DECRYPTION_FAILED = 3;
     */
    EncryptionState[EncryptionState["DECRYPTION_FAILED"] = 3] = "DECRYPTION_FAILED";
    /**
     * @generated from enum value: MISSING_KEY = 4;
     */
    EncryptionState[EncryptionState["MISSING_KEY"] = 4] = "MISSING_KEY";
    /**
     * @generated from enum value: KEY_RATCHETED = 5;
     */
    EncryptionState[EncryptionState["KEY_RATCHETED"] = 5] = "KEY_RATCHETED";
    /**
     * @generated from enum value: INTERNAL_ERROR = 6;
     */
    EncryptionState[EncryptionState["INTERNAL_ERROR"] = 6] = "INTERNAL_ERROR";
})(EncryptionState || (EncryptionState = {}));
/**
 * Describes the enum livekit.proto.EncryptionState.
 */
export const EncryptionStateSchema = /*@__PURE__*/ enumDesc(file_e2ee, 1);
//# sourceMappingURL=e2ee_pb.js.map