import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { E2eeRequest, E2eeResponse } from "./e2ee_pb.js";
import type { CreateAudioTrackRequest, CreateAudioTrackResponse, CreateVideoTrackRequest, CreateVideoTrackResponse, EnableRemoteTrackRequest, EnableRemoteTrackResponse, GetStatsCallback, GetStatsRequest, GetStatsResponse, LocalTrackMuteRequest, LocalTrackMuteResponse, TrackEvent } from "./track_pb.js";
import type { ConnectCallback, ConnectRequest, ConnectResponse, DisconnectCallback, DisconnectRequest, DisconnectResponse, EditChatMessageRequest, GetSessionStatsCallback, GetSessionStatsRequest, GetSessionStatsResponse, PublishDataCallback, PublishDataRequest, PublishDataResponse, PublishSipDtmfCallback, PublishSipDtmfRequest, PublishSipDtmfResponse, PublishTrackCallback, PublishTrackRequest, PublishTrackResponse, PublishTranscriptionCallback, PublishTranscriptionRequest, PublishTranscriptionResponse, RoomEvent, SendChatMessageCallback, SendChatMessageRequest, SendChatMessageResponse, SetLocalAttributesCallback, SetLocalAttributesRequest, SetLocalAttributesResponse, SetLocalMetadataCallback, SetLocalMetadataRequest, SetLocalMetadataResponse, SetLocalNameCallback, SetLocalNameRequest, SetLocalNameResponse, SetSubscribedRequest, SetSubscribedResponse, UnpublishTrackCallback, UnpublishTrackRequest, UnpublishTrackResponse } from "./room_pb.js";
import type { CaptureVideoFrameRequest, CaptureVideoFrameResponse, NewVideoSourceRequest, NewVideoSourceResponse, NewVideoStreamRequest, NewVideoStreamResponse, VideoConvertRequest, VideoConvertResponse, VideoStreamEvent, VideoStreamFromParticipantRequest, VideoStreamFromParticipantResponse } from "./video_frame_pb.js";
import type { AudioStreamEvent, AudioStreamFromParticipantRequest, AudioStreamFromParticipantResponse, CaptureAudioFrameCallback, CaptureAudioFrameRequest, CaptureAudioFrameResponse, ClearAudioBufferRequest, ClearAudioBufferResponse, FlushSoxResamplerRequest, FlushSoxResamplerResponse, NewAudioResamplerRequest, NewAudioResamplerResponse, NewAudioSourceRequest, NewAudioSourceResponse, NewAudioStreamRequest, NewAudioStreamResponse, NewSoxResamplerRequest, NewSoxResamplerResponse, PushSoxResamplerRequest, PushSoxResamplerResponse, RemixAndResampleRequest, RemixAndResampleResponse } from "./audio_frame_pb.js";
import type { PerformRpcCallback, PerformRpcRequest, PerformRpcResponse, RegisterRpcMethodRequest, RegisterRpcMethodResponse, RpcMethodInvocationEvent, RpcMethodInvocationResponseRequest, RpcMethodInvocationResponseResponse, UnregisterRpcMethodRequest, UnregisterRpcMethodResponse } from "./rpc_pb.js";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file ffi.proto.
 */
export declare const file_ffi: GenFile;
/**
 * This is the input of livekit_ffi_request function
 * We always expect a response (FFIResponse, even if it's empty)
 *
 * @generated from message livekit.proto.FfiRequest
 */
export type FfiRequest = Message<"livekit.proto.FfiRequest"> & {
    /**
     * @generated from oneof livekit.proto.FfiRequest.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.DisposeRequest dispose = 2;
         */
        value: DisposeRequest;
        case: "dispose";
    } | {
        /**
         * Room
         *
         * @generated from field: livekit.proto.ConnectRequest connect = 3;
         */
        value: ConnectRequest;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectRequest disconnect = 4;
         */
        value: DisconnectRequest;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackRequest publish_track = 5;
         */
        value: PublishTrackRequest;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackRequest unpublish_track = 6;
         */
        value: UnpublishTrackRequest;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataRequest publish_data = 7;
         */
        value: PublishDataRequest;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.SetSubscribedRequest set_subscribed = 8;
         */
        value: SetSubscribedRequest;
        case: "setSubscribed";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
         */
        value: SetLocalMetadataRequest;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameRequest set_local_name = 10;
         */
        value: SetLocalNameRequest;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
         */
        value: SetLocalAttributesRequest;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsRequest get_session_stats = 12;
         */
        value: GetSessionStatsRequest;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
         */
        value: PublishTranscriptionRequest;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
         */
        value: PublishSipDtmfRequest;
        case: "publishSipDtmf";
    } | {
        /**
         * Track
         *
         * @generated from field: livekit.proto.CreateVideoTrackRequest create_video_track = 15;
         */
        value: CreateVideoTrackRequest;
        case: "createVideoTrack";
    } | {
        /**
         * @generated from field: livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
         */
        value: CreateAudioTrackRequest;
        case: "createAudioTrack";
    } | {
        /**
         * @generated from field: livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
         */
        value: LocalTrackMuteRequest;
        case: "localTrackMute";
    } | {
        /**
         * @generated from field: livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
         */
        value: EnableRemoteTrackRequest;
        case: "enableRemoteTrack";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsRequest get_stats = 19;
         */
        value: GetStatsRequest;
        case: "getStats";
    } | {
        /**
         * Video
         *
         * @generated from field: livekit.proto.NewVideoStreamRequest new_video_stream = 20;
         */
        value: NewVideoStreamRequest;
        case: "newVideoStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewVideoSourceRequest new_video_source = 21;
         */
        value: NewVideoSourceRequest;
        case: "newVideoSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
         */
        value: CaptureVideoFrameRequest;
        case: "captureVideoFrame";
    } | {
        /**
         * @generated from field: livekit.proto.VideoConvertRequest video_convert = 23;
         */
        value: VideoConvertRequest;
        case: "videoConvert";
    } | {
        /**
         * @generated from field: livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
         */
        value: VideoStreamFromParticipantRequest;
        case: "videoStreamFromParticipant";
    } | {
        /**
         * Audio
         *
         * @generated from field: livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
         */
        value: NewAudioStreamRequest;
        case: "newAudioStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioSourceRequest new_audio_source = 26;
         */
        value: NewAudioSourceRequest;
        case: "newAudioSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
         */
        value: CaptureAudioFrameRequest;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
         */
        value: ClearAudioBufferRequest;
        case: "clearAudioBuffer";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
         */
        value: NewAudioResamplerRequest;
        case: "newAudioResampler";
    } | {
        /**
         * @generated from field: livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
         */
        value: RemixAndResampleRequest;
        case: "remixAndResample";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeRequest e2ee = 31;
         */
        value: E2eeRequest;
        case: "e2ee";
    } | {
        /**
         * @generated from field: livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
         */
        value: AudioStreamFromParticipantRequest;
        case: "audioStreamFromParticipant";
    } | {
        /**
         * @generated from field: livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
         */
        value: NewSoxResamplerRequest;
        case: "newSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
         */
        value: PushSoxResamplerRequest;
        case: "pushSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
         */
        value: FlushSoxResamplerRequest;
        case: "flushSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.SendChatMessageRequest send_chat_message = 36;
         */
        value: SendChatMessageRequest;
        case: "sendChatMessage";
    } | {
        /**
         * @generated from field: livekit.proto.EditChatMessageRequest edit_chat_message = 37;
         */
        value: EditChatMessageRequest;
        case: "editChatMessage";
    } | {
        /**
         * RPC
         *
         * @generated from field: livekit.proto.PerformRpcRequest perform_rpc = 38;
         */
        value: PerformRpcRequest;
        case: "performRpc";
    } | {
        /**
         * @generated from field: livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
         */
        value: RegisterRpcMethodRequest;
        case: "registerRpcMethod";
    } | {
        /**
         * @generated from field: livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
         */
        value: UnregisterRpcMethodRequest;
        case: "unregisterRpcMethod";
    } | {
        /**
         * @generated from field: livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
         */
        value: RpcMethodInvocationResponseRequest;
        case: "rpcMethodInvocationResponse";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.FfiRequest.
 * Use `create(FfiRequestSchema)` to create a new message.
 */
export declare const FfiRequestSchema: GenMessage<FfiRequest>;
/**
 * This is the output of livekit_ffi_request function.
 *
 * @generated from message livekit.proto.FfiResponse
 */
export type FfiResponse = Message<"livekit.proto.FfiResponse"> & {
    /**
     * @generated from oneof livekit.proto.FfiResponse.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.DisposeResponse dispose = 2;
         */
        value: DisposeResponse;
        case: "dispose";
    } | {
        /**
         * Room
         *
         * @generated from field: livekit.proto.ConnectResponse connect = 3;
         */
        value: ConnectResponse;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectResponse disconnect = 4;
         */
        value: DisconnectResponse;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackResponse publish_track = 5;
         */
        value: PublishTrackResponse;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackResponse unpublish_track = 6;
         */
        value: UnpublishTrackResponse;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataResponse publish_data = 7;
         */
        value: PublishDataResponse;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.SetSubscribedResponse set_subscribed = 8;
         */
        value: SetSubscribedResponse;
        case: "setSubscribed";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
         */
        value: SetLocalMetadataResponse;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameResponse set_local_name = 10;
         */
        value: SetLocalNameResponse;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
         */
        value: SetLocalAttributesResponse;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsResponse get_session_stats = 12;
         */
        value: GetSessionStatsResponse;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
         */
        value: PublishTranscriptionResponse;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
         */
        value: PublishSipDtmfResponse;
        case: "publishSipDtmf";
    } | {
        /**
         * Track
         *
         * @generated from field: livekit.proto.CreateVideoTrackResponse create_video_track = 15;
         */
        value: CreateVideoTrackResponse;
        case: "createVideoTrack";
    } | {
        /**
         * @generated from field: livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
         */
        value: CreateAudioTrackResponse;
        case: "createAudioTrack";
    } | {
        /**
         * @generated from field: livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
         */
        value: LocalTrackMuteResponse;
        case: "localTrackMute";
    } | {
        /**
         * @generated from field: livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
         */
        value: EnableRemoteTrackResponse;
        case: "enableRemoteTrack";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsResponse get_stats = 19;
         */
        value: GetStatsResponse;
        case: "getStats";
    } | {
        /**
         * Video
         *
         * @generated from field: livekit.proto.NewVideoStreamResponse new_video_stream = 20;
         */
        value: NewVideoStreamResponse;
        case: "newVideoStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewVideoSourceResponse new_video_source = 21;
         */
        value: NewVideoSourceResponse;
        case: "newVideoSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
         */
        value: CaptureVideoFrameResponse;
        case: "captureVideoFrame";
    } | {
        /**
         * @generated from field: livekit.proto.VideoConvertResponse video_convert = 23;
         */
        value: VideoConvertResponse;
        case: "videoConvert";
    } | {
        /**
         * @generated from field: livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
         */
        value: VideoStreamFromParticipantResponse;
        case: "videoStreamFromParticipant";
    } | {
        /**
         * Audio
         *
         * @generated from field: livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
         */
        value: NewAudioStreamResponse;
        case: "newAudioStream";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioSourceResponse new_audio_source = 26;
         */
        value: NewAudioSourceResponse;
        case: "newAudioSource";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
         */
        value: CaptureAudioFrameResponse;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
         */
        value: ClearAudioBufferResponse;
        case: "clearAudioBuffer";
    } | {
        /**
         * @generated from field: livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
         */
        value: NewAudioResamplerResponse;
        case: "newAudioResampler";
    } | {
        /**
         * @generated from field: livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
         */
        value: RemixAndResampleResponse;
        case: "remixAndResample";
    } | {
        /**
         * @generated from field: livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
         */
        value: AudioStreamFromParticipantResponse;
        case: "audioStreamFromParticipant";
    } | {
        /**
         * @generated from field: livekit.proto.E2eeResponse e2ee = 32;
         */
        value: E2eeResponse;
        case: "e2ee";
    } | {
        /**
         * @generated from field: livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
         */
        value: NewSoxResamplerResponse;
        case: "newSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
         */
        value: PushSoxResamplerResponse;
        case: "pushSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
         */
        value: FlushSoxResamplerResponse;
        case: "flushSoxResampler";
    } | {
        /**
         * @generated from field: livekit.proto.SendChatMessageResponse send_chat_message = 36;
         */
        value: SendChatMessageResponse;
        case: "sendChatMessage";
    } | {
        /**
         * RPC
         *
         * @generated from field: livekit.proto.PerformRpcResponse perform_rpc = 37;
         */
        value: PerformRpcResponse;
        case: "performRpc";
    } | {
        /**
         * @generated from field: livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
         */
        value: RegisterRpcMethodResponse;
        case: "registerRpcMethod";
    } | {
        /**
         * @generated from field: livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
         */
        value: UnregisterRpcMethodResponse;
        case: "unregisterRpcMethod";
    } | {
        /**
         * @generated from field: livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
         */
        value: RpcMethodInvocationResponseResponse;
        case: "rpcMethodInvocationResponse";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.FfiResponse.
 * Use `create(FfiResponseSchema)` to create a new message.
 */
export declare const FfiResponseSchema: GenMessage<FfiResponse>;
/**
 * To minimize complexity, participant events are not included in the protocol.
 * It is easily deducible from the room events and it turned out that is is easier to implement
 * on the ffi client side.
 *
 * @generated from message livekit.proto.FfiEvent
 */
export type FfiEvent = Message<"livekit.proto.FfiEvent"> & {
    /**
     * @generated from oneof livekit.proto.FfiEvent.message
     */
    message: {
        /**
         * @generated from field: livekit.proto.RoomEvent room_event = 1;
         */
        value: RoomEvent;
        case: "roomEvent";
    } | {
        /**
         * @generated from field: livekit.proto.TrackEvent track_event = 2;
         */
        value: TrackEvent;
        case: "trackEvent";
    } | {
        /**
         * @generated from field: livekit.proto.VideoStreamEvent video_stream_event = 3;
         */
        value: VideoStreamEvent;
        case: "videoStreamEvent";
    } | {
        /**
         * @generated from field: livekit.proto.AudioStreamEvent audio_stream_event = 4;
         */
        value: AudioStreamEvent;
        case: "audioStreamEvent";
    } | {
        /**
         * @generated from field: livekit.proto.ConnectCallback connect = 5;
         */
        value: ConnectCallback;
        case: "connect";
    } | {
        /**
         * @generated from field: livekit.proto.DisconnectCallback disconnect = 7;
         */
        value: DisconnectCallback;
        case: "disconnect";
    } | {
        /**
         * @generated from field: livekit.proto.DisposeCallback dispose = 8;
         */
        value: DisposeCallback;
        case: "dispose";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTrackCallback publish_track = 9;
         */
        value: PublishTrackCallback;
        case: "publishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.UnpublishTrackCallback unpublish_track = 10;
         */
        value: UnpublishTrackCallback;
        case: "unpublishTrack";
    } | {
        /**
         * @generated from field: livekit.proto.PublishDataCallback publish_data = 11;
         */
        value: PublishDataCallback;
        case: "publishData";
    } | {
        /**
         * @generated from field: livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
         */
        value: PublishTranscriptionCallback;
        case: "publishTranscription";
    } | {
        /**
         * @generated from field: livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
         */
        value: CaptureAudioFrameCallback;
        case: "captureAudioFrame";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
         */
        value: SetLocalMetadataCallback;
        case: "setLocalMetadata";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalNameCallback set_local_name = 15;
         */
        value: SetLocalNameCallback;
        case: "setLocalName";
    } | {
        /**
         * @generated from field: livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
         */
        value: SetLocalAttributesCallback;
        case: "setLocalAttributes";
    } | {
        /**
         * @generated from field: livekit.proto.GetStatsCallback get_stats = 17;
         */
        value: GetStatsCallback;
        case: "getStats";
    } | {
        /**
         * @generated from field: livekit.proto.LogBatch logs = 18;
         */
        value: LogBatch;
        case: "logs";
    } | {
        /**
         * @generated from field: livekit.proto.GetSessionStatsCallback get_session_stats = 19;
         */
        value: GetSessionStatsCallback;
        case: "getSessionStats";
    } | {
        /**
         * @generated from field: livekit.proto.Panic panic = 20;
         */
        value: Panic;
        case: "panic";
    } | {
        /**
         * @generated from field: livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
         */
        value: PublishSipDtmfCallback;
        case: "publishSipDtmf";
    } | {
        /**
         * @generated from field: livekit.proto.SendChatMessageCallback chat_message = 22;
         */
        value: SendChatMessageCallback;
        case: "chatMessage";
    } | {
        /**
         * @generated from field: livekit.proto.PerformRpcCallback perform_rpc = 23;
         */
        value: PerformRpcCallback;
        case: "performRpc";
    } | {
        /**
         * @generated from field: livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
         */
        value: RpcMethodInvocationEvent;
        case: "rpcMethodInvocation";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.FfiEvent.
 * Use `create(FfiEventSchema)` to create a new message.
 */
export declare const FfiEventSchema: GenMessage<FfiEvent>;
/**
 * Stop all rooms synchronously (Do we need async here?).
 * e.g: This is used for the Unity Editor after each assemblies reload.
 * TODO(theomonnom): Implement a debug mode where we can find all leaked handles?
 *
 * @generated from message livekit.proto.DisposeRequest
 */
export type DisposeRequest = Message<"livekit.proto.DisposeRequest"> & {
    /**
     * @generated from field: required bool async = 1;
     */
    async: boolean;
};
/**
 * Describes the message livekit.proto.DisposeRequest.
 * Use `create(DisposeRequestSchema)` to create a new message.
 */
export declare const DisposeRequestSchema: GenMessage<DisposeRequest>;
/**
 * @generated from message livekit.proto.DisposeResponse
 */
export type DisposeResponse = Message<"livekit.proto.DisposeResponse"> & {
    /**
     * None if sync
     *
     * @generated from field: optional uint64 async_id = 1;
     */
    asyncId: bigint;
};
/**
 * Describes the message livekit.proto.DisposeResponse.
 * Use `create(DisposeResponseSchema)` to create a new message.
 */
export declare const DisposeResponseSchema: GenMessage<DisposeResponse>;
/**
 * @generated from message livekit.proto.DisposeCallback
 */
export type DisposeCallback = Message<"livekit.proto.DisposeCallback"> & {
    /**
     * @generated from field: required uint64 async_id = 1;
     */
    asyncId: bigint;
};
/**
 * Describes the message livekit.proto.DisposeCallback.
 * Use `create(DisposeCallbackSchema)` to create a new message.
 */
export declare const DisposeCallbackSchema: GenMessage<DisposeCallback>;
/**
 * @generated from message livekit.proto.LogRecord
 */
export type LogRecord = Message<"livekit.proto.LogRecord"> & {
    /**
     * @generated from field: required livekit.proto.LogLevel level = 1;
     */
    level: LogLevel;
    /**
     * e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
     *
     * @generated from field: required string target = 2;
     */
    target: string;
    /**
     * @generated from field: optional string module_path = 3;
     */
    modulePath: string;
    /**
     * @generated from field: optional string file = 4;
     */
    file: string;
    /**
     * @generated from field: optional uint32 line = 5;
     */
    line: number;
    /**
     * @generated from field: required string message = 6;
     */
    message: string;
};
/**
 * Describes the message livekit.proto.LogRecord.
 * Use `create(LogRecordSchema)` to create a new message.
 */
export declare const LogRecordSchema: GenMessage<LogRecord>;
/**
 * @generated from message livekit.proto.LogBatch
 */
export type LogBatch = Message<"livekit.proto.LogBatch"> & {
    /**
     * @generated from field: repeated livekit.proto.LogRecord records = 1;
     */
    records: LogRecord[];
};
/**
 * Describes the message livekit.proto.LogBatch.
 * Use `create(LogBatchSchema)` to create a new message.
 */
export declare const LogBatchSchema: GenMessage<LogBatch>;
/**
 * @generated from message livekit.proto.Panic
 */
export type Panic = Message<"livekit.proto.Panic"> & {
    /**
     * @generated from field: required string message = 1;
     */
    message: string;
};
/**
 * Describes the message livekit.proto.Panic.
 * Use `create(PanicSchema)` to create a new message.
 */
export declare const PanicSchema: GenMessage<Panic>;
/**
 * @generated from enum livekit.proto.LogLevel
 */
export declare enum LogLevel {
    /**
     * @generated from enum value: LOG_ERROR = 0;
     */
    LOG_ERROR = 0,
    /**
     * @generated from enum value: LOG_WARN = 1;
     */
    LOG_WARN = 1,
    /**
     * @generated from enum value: LOG_INFO = 2;
     */
    LOG_INFO = 2,
    /**
     * @generated from enum value: LOG_DEBUG = 3;
     */
    LOG_DEBUG = 3,
    /**
     * @generated from enum value: LOG_TRACE = 4;
     */
    LOG_TRACE = 4
}
/**
 * Describes the enum livekit.proto.LogLevel.
 */
export declare const LogLevelSchema: GenEnum<LogLevel>;
//# sourceMappingURL=ffi_pb.d.ts.map