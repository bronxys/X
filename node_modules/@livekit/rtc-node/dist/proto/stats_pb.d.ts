import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file stats.proto.
 */
export declare const file_stats: GenFile;
/**
 * @generated from message livekit.proto.RtcStats
 */
export type RtcStats = Message<"livekit.proto.RtcStats"> & {
    /**
     * @generated from oneof livekit.proto.RtcStats.stats
     */
    stats: {
        /**
         * @generated from field: livekit.proto.RtcStats.Codec codec = 3;
         */
        value: RtcStats_Codec;
        case: "codec";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
         */
        value: RtcStats_InboundRtp;
        case: "inboundRtp";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
         */
        value: RtcStats_OutboundRtp;
        case: "outboundRtp";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
         */
        value: RtcStats_RemoteInboundRtp;
        case: "remoteInboundRtp";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
         */
        value: RtcStats_RemoteOutboundRtp;
        case: "remoteOutboundRtp";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.MediaSource media_source = 8;
         */
        value: RtcStats_MediaSource;
        case: "mediaSource";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.MediaPlayout media_playout = 9;
         */
        value: RtcStats_MediaPlayout;
        case: "mediaPlayout";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.PeerConnection peer_connection = 10;
         */
        value: RtcStats_PeerConnection;
        case: "peerConnection";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.DataChannel data_channel = 11;
         */
        value: RtcStats_DataChannel;
        case: "dataChannel";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.Transport transport = 12;
         */
        value: RtcStats_Transport;
        case: "transport";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
         */
        value: RtcStats_CandidatePair;
        case: "candidatePair";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
         */
        value: RtcStats_LocalCandidate;
        case: "localCandidate";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
         */
        value: RtcStats_RemoteCandidate;
        case: "remoteCandidate";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.Certificate certificate = 16;
         */
        value: RtcStats_Certificate;
        case: "certificate";
    } | {
        /**
         * @generated from field: livekit.proto.RtcStats.Track track = 17;
         */
        value: RtcStats_Track;
        case: "track";
    } | {
        case: undefined;
        value?: undefined;
    };
};
/**
 * Describes the message livekit.proto.RtcStats.
 * Use `create(RtcStatsSchema)` to create a new message.
 */
export declare const RtcStatsSchema: GenMessage<RtcStats>;
/**
 * @generated from message livekit.proto.RtcStats.Codec
 */
export type RtcStats_Codec = Message<"livekit.proto.RtcStats.Codec"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.CodecStats codec = 2;
     */
    codec?: CodecStats;
};
/**
 * Describes the message livekit.proto.RtcStats.Codec.
 * Use `create(RtcStats_CodecSchema)` to create a new message.
 */
export declare const RtcStats_CodecSchema: GenMessage<RtcStats_Codec>;
/**
 * @generated from message livekit.proto.RtcStats.InboundRtp
 */
export type RtcStats_InboundRtp = Message<"livekit.proto.RtcStats.InboundRtp"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.RtpStreamStats stream = 2;
     */
    stream?: RtpStreamStats;
    /**
     * @generated from field: required livekit.proto.ReceivedRtpStreamStats received = 3;
     */
    received?: ReceivedRtpStreamStats;
    /**
     * @generated from field: required livekit.proto.InboundRtpStreamStats inbound = 4;
     */
    inbound?: InboundRtpStreamStats;
};
/**
 * Describes the message livekit.proto.RtcStats.InboundRtp.
 * Use `create(RtcStats_InboundRtpSchema)` to create a new message.
 */
export declare const RtcStats_InboundRtpSchema: GenMessage<RtcStats_InboundRtp>;
/**
 * @generated from message livekit.proto.RtcStats.OutboundRtp
 */
export type RtcStats_OutboundRtp = Message<"livekit.proto.RtcStats.OutboundRtp"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.RtpStreamStats stream = 2;
     */
    stream?: RtpStreamStats;
    /**
     * @generated from field: required livekit.proto.SentRtpStreamStats sent = 3;
     */
    sent?: SentRtpStreamStats;
    /**
     * @generated from field: required livekit.proto.OutboundRtpStreamStats outbound = 4;
     */
    outbound?: OutboundRtpStreamStats;
};
/**
 * Describes the message livekit.proto.RtcStats.OutboundRtp.
 * Use `create(RtcStats_OutboundRtpSchema)` to create a new message.
 */
export declare const RtcStats_OutboundRtpSchema: GenMessage<RtcStats_OutboundRtp>;
/**
 * @generated from message livekit.proto.RtcStats.RemoteInboundRtp
 */
export type RtcStats_RemoteInboundRtp = Message<"livekit.proto.RtcStats.RemoteInboundRtp"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.RtpStreamStats stream = 2;
     */
    stream?: RtpStreamStats;
    /**
     * @generated from field: required livekit.proto.ReceivedRtpStreamStats received = 3;
     */
    received?: ReceivedRtpStreamStats;
    /**
     * @generated from field: required livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
     */
    remoteInbound?: RemoteInboundRtpStreamStats;
};
/**
 * Describes the message livekit.proto.RtcStats.RemoteInboundRtp.
 * Use `create(RtcStats_RemoteInboundRtpSchema)` to create a new message.
 */
export declare const RtcStats_RemoteInboundRtpSchema: GenMessage<RtcStats_RemoteInboundRtp>;
/**
 * @generated from message livekit.proto.RtcStats.RemoteOutboundRtp
 */
export type RtcStats_RemoteOutboundRtp = Message<"livekit.proto.RtcStats.RemoteOutboundRtp"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.RtpStreamStats stream = 2;
     */
    stream?: RtpStreamStats;
    /**
     * @generated from field: required livekit.proto.SentRtpStreamStats sent = 3;
     */
    sent?: SentRtpStreamStats;
    /**
     * @generated from field: required livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
     */
    remoteOutbound?: RemoteOutboundRtpStreamStats;
};
/**
 * Describes the message livekit.proto.RtcStats.RemoteOutboundRtp.
 * Use `create(RtcStats_RemoteOutboundRtpSchema)` to create a new message.
 */
export declare const RtcStats_RemoteOutboundRtpSchema: GenMessage<RtcStats_RemoteOutboundRtp>;
/**
 * @generated from message livekit.proto.RtcStats.MediaSource
 */
export type RtcStats_MediaSource = Message<"livekit.proto.RtcStats.MediaSource"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.MediaSourceStats source = 2;
     */
    source?: MediaSourceStats;
    /**
     * @generated from field: required livekit.proto.AudioSourceStats audio = 3;
     */
    audio?: AudioSourceStats;
    /**
     * @generated from field: required livekit.proto.VideoSourceStats video = 4;
     */
    video?: VideoSourceStats;
};
/**
 * Describes the message livekit.proto.RtcStats.MediaSource.
 * Use `create(RtcStats_MediaSourceSchema)` to create a new message.
 */
export declare const RtcStats_MediaSourceSchema: GenMessage<RtcStats_MediaSource>;
/**
 * @generated from message livekit.proto.RtcStats.MediaPlayout
 */
export type RtcStats_MediaPlayout = Message<"livekit.proto.RtcStats.MediaPlayout"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.AudioPlayoutStats audio_playout = 2;
     */
    audioPlayout?: AudioPlayoutStats;
};
/**
 * Describes the message livekit.proto.RtcStats.MediaPlayout.
 * Use `create(RtcStats_MediaPlayoutSchema)` to create a new message.
 */
export declare const RtcStats_MediaPlayoutSchema: GenMessage<RtcStats_MediaPlayout>;
/**
 * @generated from message livekit.proto.RtcStats.PeerConnection
 */
export type RtcStats_PeerConnection = Message<"livekit.proto.RtcStats.PeerConnection"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.PeerConnectionStats pc = 2;
     */
    pc?: PeerConnectionStats;
};
/**
 * Describes the message livekit.proto.RtcStats.PeerConnection.
 * Use `create(RtcStats_PeerConnectionSchema)` to create a new message.
 */
export declare const RtcStats_PeerConnectionSchema: GenMessage<RtcStats_PeerConnection>;
/**
 * @generated from message livekit.proto.RtcStats.DataChannel
 */
export type RtcStats_DataChannel = Message<"livekit.proto.RtcStats.DataChannel"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.DataChannelStats dc = 2;
     */
    dc?: DataChannelStats;
};
/**
 * Describes the message livekit.proto.RtcStats.DataChannel.
 * Use `create(RtcStats_DataChannelSchema)` to create a new message.
 */
export declare const RtcStats_DataChannelSchema: GenMessage<RtcStats_DataChannel>;
/**
 * @generated from message livekit.proto.RtcStats.Transport
 */
export type RtcStats_Transport = Message<"livekit.proto.RtcStats.Transport"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.TransportStats transport = 2;
     */
    transport?: TransportStats;
};
/**
 * Describes the message livekit.proto.RtcStats.Transport.
 * Use `create(RtcStats_TransportSchema)` to create a new message.
 */
export declare const RtcStats_TransportSchema: GenMessage<RtcStats_Transport>;
/**
 * @generated from message livekit.proto.RtcStats.CandidatePair
 */
export type RtcStats_CandidatePair = Message<"livekit.proto.RtcStats.CandidatePair"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.CandidatePairStats candidate_pair = 2;
     */
    candidatePair?: CandidatePairStats;
};
/**
 * Describes the message livekit.proto.RtcStats.CandidatePair.
 * Use `create(RtcStats_CandidatePairSchema)` to create a new message.
 */
export declare const RtcStats_CandidatePairSchema: GenMessage<RtcStats_CandidatePair>;
/**
 * @generated from message livekit.proto.RtcStats.LocalCandidate
 */
export type RtcStats_LocalCandidate = Message<"livekit.proto.RtcStats.LocalCandidate"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.IceCandidateStats candidate = 2;
     */
    candidate?: IceCandidateStats;
};
/**
 * Describes the message livekit.proto.RtcStats.LocalCandidate.
 * Use `create(RtcStats_LocalCandidateSchema)` to create a new message.
 */
export declare const RtcStats_LocalCandidateSchema: GenMessage<RtcStats_LocalCandidate>;
/**
 * @generated from message livekit.proto.RtcStats.RemoteCandidate
 */
export type RtcStats_RemoteCandidate = Message<"livekit.proto.RtcStats.RemoteCandidate"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.IceCandidateStats candidate = 2;
     */
    candidate?: IceCandidateStats;
};
/**
 * Describes the message livekit.proto.RtcStats.RemoteCandidate.
 * Use `create(RtcStats_RemoteCandidateSchema)` to create a new message.
 */
export declare const RtcStats_RemoteCandidateSchema: GenMessage<RtcStats_RemoteCandidate>;
/**
 * @generated from message livekit.proto.RtcStats.Certificate
 */
export type RtcStats_Certificate = Message<"livekit.proto.RtcStats.Certificate"> & {
    /**
     * @generated from field: required livekit.proto.RtcStatsData rtc = 1;
     */
    rtc?: RtcStatsData;
    /**
     * @generated from field: required livekit.proto.CertificateStats certificate = 2;
     */
    certificate?: CertificateStats;
};
/**
 * Describes the message livekit.proto.RtcStats.Certificate.
 * Use `create(RtcStats_CertificateSchema)` to create a new message.
 */
export declare const RtcStats_CertificateSchema: GenMessage<RtcStats_Certificate>;
/**
 * Deprecated
 *
 * @generated from message livekit.proto.RtcStats.Track
 */
export type RtcStats_Track = Message<"livekit.proto.RtcStats.Track"> & {};
/**
 * Describes the message livekit.proto.RtcStats.Track.
 * Use `create(RtcStats_TrackSchema)` to create a new message.
 */
export declare const RtcStats_TrackSchema: GenMessage<RtcStats_Track>;
/**
 * @generated from message livekit.proto.RtcStatsData
 */
export type RtcStatsData = Message<"livekit.proto.RtcStatsData"> & {
    /**
     * @generated from field: required string id = 1;
     */
    id: string;
    /**
     * @generated from field: required int64 timestamp = 2;
     */
    timestamp: bigint;
};
/**
 * Describes the message livekit.proto.RtcStatsData.
 * Use `create(RtcStatsDataSchema)` to create a new message.
 */
export declare const RtcStatsDataSchema: GenMessage<RtcStatsData>;
/**
 * @generated from message livekit.proto.CodecStats
 */
export type CodecStats = Message<"livekit.proto.CodecStats"> & {
    /**
     * @generated from field: required uint32 payload_type = 1;
     */
    payloadType: number;
    /**
     * @generated from field: required string transport_id = 2;
     */
    transportId: string;
    /**
     * @generated from field: required string mime_type = 3;
     */
    mimeType: string;
    /**
     * @generated from field: required uint32 clock_rate = 4;
     */
    clockRate: number;
    /**
     * @generated from field: required uint32 channels = 5;
     */
    channels: number;
    /**
     * @generated from field: required string sdp_fmtp_line = 6;
     */
    sdpFmtpLine: string;
};
/**
 * Describes the message livekit.proto.CodecStats.
 * Use `create(CodecStatsSchema)` to create a new message.
 */
export declare const CodecStatsSchema: GenMessage<CodecStats>;
/**
 * @generated from message livekit.proto.RtpStreamStats
 */
export type RtpStreamStats = Message<"livekit.proto.RtpStreamStats"> & {
    /**
     * @generated from field: required uint32 ssrc = 1;
     */
    ssrc: number;
    /**
     * @generated from field: required string kind = 2;
     */
    kind: string;
    /**
     * @generated from field: required string transport_id = 3;
     */
    transportId: string;
    /**
     * @generated from field: required string codec_id = 4;
     */
    codecId: string;
};
/**
 * Describes the message livekit.proto.RtpStreamStats.
 * Use `create(RtpStreamStatsSchema)` to create a new message.
 */
export declare const RtpStreamStatsSchema: GenMessage<RtpStreamStats>;
/**
 * @generated from message livekit.proto.ReceivedRtpStreamStats
 */
export type ReceivedRtpStreamStats = Message<"livekit.proto.ReceivedRtpStreamStats"> & {
    /**
     * @generated from field: required uint64 packets_received = 1;
     */
    packetsReceived: bigint;
    /**
     * @generated from field: required int64 packets_lost = 2;
     */
    packetsLost: bigint;
    /**
     * @generated from field: required double jitter = 3;
     */
    jitter: number;
};
/**
 * Describes the message livekit.proto.ReceivedRtpStreamStats.
 * Use `create(ReceivedRtpStreamStatsSchema)` to create a new message.
 */
export declare const ReceivedRtpStreamStatsSchema: GenMessage<ReceivedRtpStreamStats>;
/**
 * @generated from message livekit.proto.InboundRtpStreamStats
 */
export type InboundRtpStreamStats = Message<"livekit.proto.InboundRtpStreamStats"> & {
    /**
     * @generated from field: required string track_identifier = 1;
     */
    trackIdentifier: string;
    /**
     * @generated from field: required string mid = 2;
     */
    mid: string;
    /**
     * @generated from field: required string remote_id = 3;
     */
    remoteId: string;
    /**
     * @generated from field: required uint32 frames_decoded = 4;
     */
    framesDecoded: number;
    /**
     * @generated from field: required uint32 key_frames_decoded = 5;
     */
    keyFramesDecoded: number;
    /**
     * @generated from field: required uint32 frames_rendered = 6;
     */
    framesRendered: number;
    /**
     * @generated from field: required uint32 frames_dropped = 7;
     */
    framesDropped: number;
    /**
     * @generated from field: required uint32 frame_width = 8;
     */
    frameWidth: number;
    /**
     * @generated from field: required uint32 frame_height = 9;
     */
    frameHeight: number;
    /**
     * @generated from field: required double frames_per_second = 10;
     */
    framesPerSecond: number;
    /**
     * @generated from field: required uint64 qp_sum = 11;
     */
    qpSum: bigint;
    /**
     * @generated from field: required double total_decode_time = 12;
     */
    totalDecodeTime: number;
    /**
     * @generated from field: required double total_inter_frame_delay = 13;
     */
    totalInterFrameDelay: number;
    /**
     * @generated from field: required double total_squared_inter_frame_delay = 14;
     */
    totalSquaredInterFrameDelay: number;
    /**
     * @generated from field: required uint32 pause_count = 15;
     */
    pauseCount: number;
    /**
     * @generated from field: required double total_pause_duration = 16;
     */
    totalPauseDuration: number;
    /**
     * @generated from field: required uint32 freeze_count = 17;
     */
    freezeCount: number;
    /**
     * @generated from field: required double total_freeze_duration = 18;
     */
    totalFreezeDuration: number;
    /**
     * @generated from field: required double last_packet_received_timestamp = 19;
     */
    lastPacketReceivedTimestamp: number;
    /**
     * @generated from field: required uint64 header_bytes_received = 20;
     */
    headerBytesReceived: bigint;
    /**
     * @generated from field: required uint64 packets_discarded = 21;
     */
    packetsDiscarded: bigint;
    /**
     * @generated from field: required uint64 fec_bytes_received = 22;
     */
    fecBytesReceived: bigint;
    /**
     * @generated from field: required uint64 fec_packets_received = 23;
     */
    fecPacketsReceived: bigint;
    /**
     * @generated from field: required uint64 fec_packets_discarded = 24;
     */
    fecPacketsDiscarded: bigint;
    /**
     * @generated from field: required uint64 bytes_received = 25;
     */
    bytesReceived: bigint;
    /**
     * @generated from field: required uint32 nack_count = 26;
     */
    nackCount: number;
    /**
     * @generated from field: required uint32 fir_count = 27;
     */
    firCount: number;
    /**
     * @generated from field: required uint32 pli_count = 28;
     */
    pliCount: number;
    /**
     * @generated from field: required double total_processing_delay = 29;
     */
    totalProcessingDelay: number;
    /**
     * @generated from field: required double estimated_playout_timestamp = 30;
     */
    estimatedPlayoutTimestamp: number;
    /**
     * @generated from field: required double jitter_buffer_delay = 31;
     */
    jitterBufferDelay: number;
    /**
     * @generated from field: required double jitter_buffer_target_delay = 32;
     */
    jitterBufferTargetDelay: number;
    /**
     * @generated from field: required uint64 jitter_buffer_emitted_count = 33;
     */
    jitterBufferEmittedCount: bigint;
    /**
     * @generated from field: required double jitter_buffer_minimum_delay = 34;
     */
    jitterBufferMinimumDelay: number;
    /**
     * @generated from field: required uint64 total_samples_received = 35;
     */
    totalSamplesReceived: bigint;
    /**
     * @generated from field: required uint64 concealed_samples = 36;
     */
    concealedSamples: bigint;
    /**
     * @generated from field: required uint64 silent_concealed_samples = 37;
     */
    silentConcealedSamples: bigint;
    /**
     * @generated from field: required uint64 concealment_events = 38;
     */
    concealmentEvents: bigint;
    /**
     * @generated from field: required uint64 inserted_samples_for_deceleration = 39;
     */
    insertedSamplesForDeceleration: bigint;
    /**
     * @generated from field: required uint64 removed_samples_for_acceleration = 40;
     */
    removedSamplesForAcceleration: bigint;
    /**
     * @generated from field: required double audio_level = 41;
     */
    audioLevel: number;
    /**
     * @generated from field: required double total_audio_energy = 42;
     */
    totalAudioEnergy: number;
    /**
     * @generated from field: required double total_samples_duration = 43;
     */
    totalSamplesDuration: number;
    /**
     * @generated from field: required uint64 frames_received = 44;
     */
    framesReceived: bigint;
    /**
     * @generated from field: required string decoder_implementation = 45;
     */
    decoderImplementation: string;
    /**
     * @generated from field: required string playout_id = 46;
     */
    playoutId: string;
    /**
     * @generated from field: required bool power_efficient_decoder = 47;
     */
    powerEfficientDecoder: boolean;
    /**
     * @generated from field: required uint64 frames_assembled_from_multiple_packets = 48;
     */
    framesAssembledFromMultiplePackets: bigint;
    /**
     * @generated from field: required double total_assembly_time = 49;
     */
    totalAssemblyTime: number;
    /**
     * @generated from field: required uint64 retransmitted_packets_received = 50;
     */
    retransmittedPacketsReceived: bigint;
    /**
     * @generated from field: required uint64 retransmitted_bytes_received = 51;
     */
    retransmittedBytesReceived: bigint;
    /**
     * @generated from field: required uint32 rtx_ssrc = 52;
     */
    rtxSsrc: number;
    /**
     * @generated from field: required uint32 fec_ssrc = 53;
     */
    fecSsrc: number;
};
/**
 * Describes the message livekit.proto.InboundRtpStreamStats.
 * Use `create(InboundRtpStreamStatsSchema)` to create a new message.
 */
export declare const InboundRtpStreamStatsSchema: GenMessage<InboundRtpStreamStats>;
/**
 * @generated from message livekit.proto.SentRtpStreamStats
 */
export type SentRtpStreamStats = Message<"livekit.proto.SentRtpStreamStats"> & {
    /**
     * @generated from field: required uint64 packets_sent = 1;
     */
    packetsSent: bigint;
    /**
     * @generated from field: required uint64 bytes_sent = 2;
     */
    bytesSent: bigint;
};
/**
 * Describes the message livekit.proto.SentRtpStreamStats.
 * Use `create(SentRtpStreamStatsSchema)` to create a new message.
 */
export declare const SentRtpStreamStatsSchema: GenMessage<SentRtpStreamStats>;
/**
 * @generated from message livekit.proto.OutboundRtpStreamStats
 */
export type OutboundRtpStreamStats = Message<"livekit.proto.OutboundRtpStreamStats"> & {
    /**
     * @generated from field: required string mid = 1;
     */
    mid: string;
    /**
     * @generated from field: required string media_source_id = 2;
     */
    mediaSourceId: string;
    /**
     * @generated from field: required string remote_id = 3;
     */
    remoteId: string;
    /**
     * @generated from field: required string rid = 4;
     */
    rid: string;
    /**
     * @generated from field: required uint64 header_bytes_sent = 5;
     */
    headerBytesSent: bigint;
    /**
     * @generated from field: required uint64 retransmitted_packets_sent = 6;
     */
    retransmittedPacketsSent: bigint;
    /**
     * @generated from field: required uint64 retransmitted_bytes_sent = 7;
     */
    retransmittedBytesSent: bigint;
    /**
     * @generated from field: required uint32 rtx_ssrc = 8;
     */
    rtxSsrc: number;
    /**
     * @generated from field: required double target_bitrate = 9;
     */
    targetBitrate: number;
    /**
     * @generated from field: required uint64 total_encoded_bytes_target = 10;
     */
    totalEncodedBytesTarget: bigint;
    /**
     * @generated from field: required uint32 frame_width = 11;
     */
    frameWidth: number;
    /**
     * @generated from field: required uint32 frame_height = 12;
     */
    frameHeight: number;
    /**
     * @generated from field: required double frames_per_second = 13;
     */
    framesPerSecond: number;
    /**
     * @generated from field: required uint32 frames_sent = 14;
     */
    framesSent: number;
    /**
     * @generated from field: required uint32 huge_frames_sent = 15;
     */
    hugeFramesSent: number;
    /**
     * @generated from field: required uint32 frames_encoded = 16;
     */
    framesEncoded: number;
    /**
     * @generated from field: required uint32 key_frames_encoded = 17;
     */
    keyFramesEncoded: number;
    /**
     * @generated from field: required uint64 qp_sum = 18;
     */
    qpSum: bigint;
    /**
     * @generated from field: required double total_encode_time = 19;
     */
    totalEncodeTime: number;
    /**
     * @generated from field: required double total_packet_send_delay = 20;
     */
    totalPacketSendDelay: number;
    /**
     * @generated from field: required livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
     */
    qualityLimitationReason: QualityLimitationReason;
    /**
     * @generated from field: map<string, double> quality_limitation_durations = 22;
     */
    qualityLimitationDurations: {
        [key: string]: number;
    };
    /**
     * @generated from field: required uint32 quality_limitation_resolution_changes = 23;
     */
    qualityLimitationResolutionChanges: number;
    /**
     * @generated from field: required uint32 nack_count = 24;
     */
    nackCount: number;
    /**
     * @generated from field: required uint32 fir_count = 25;
     */
    firCount: number;
    /**
     * @generated from field: required uint32 pli_count = 26;
     */
    pliCount: number;
    /**
     * @generated from field: required string encoder_implementation = 27;
     */
    encoderImplementation: string;
    /**
     * @generated from field: required bool power_efficient_encoder = 28;
     */
    powerEfficientEncoder: boolean;
    /**
     * @generated from field: required bool active = 29;
     */
    active: boolean;
    /**
     * @generated from field: required string scalability_mode = 30;
     */
    scalabilityMode: string;
};
/**
 * Describes the message livekit.proto.OutboundRtpStreamStats.
 * Use `create(OutboundRtpStreamStatsSchema)` to create a new message.
 */
export declare const OutboundRtpStreamStatsSchema: GenMessage<OutboundRtpStreamStats>;
/**
 * @generated from message livekit.proto.RemoteInboundRtpStreamStats
 */
export type RemoteInboundRtpStreamStats = Message<"livekit.proto.RemoteInboundRtpStreamStats"> & {
    /**
     * @generated from field: required string local_id = 1;
     */
    localId: string;
    /**
     * @generated from field: required double round_trip_time = 2;
     */
    roundTripTime: number;
    /**
     * @generated from field: required double total_round_trip_time = 3;
     */
    totalRoundTripTime: number;
    /**
     * @generated from field: required double fraction_lost = 4;
     */
    fractionLost: number;
    /**
     * @generated from field: required uint64 round_trip_time_measurements = 5;
     */
    roundTripTimeMeasurements: bigint;
};
/**
 * Describes the message livekit.proto.RemoteInboundRtpStreamStats.
 * Use `create(RemoteInboundRtpStreamStatsSchema)` to create a new message.
 */
export declare const RemoteInboundRtpStreamStatsSchema: GenMessage<RemoteInboundRtpStreamStats>;
/**
 * @generated from message livekit.proto.RemoteOutboundRtpStreamStats
 */
export type RemoteOutboundRtpStreamStats = Message<"livekit.proto.RemoteOutboundRtpStreamStats"> & {
    /**
     * @generated from field: required string local_id = 1;
     */
    localId: string;
    /**
     * @generated from field: required double remote_timestamp = 2;
     */
    remoteTimestamp: number;
    /**
     * @generated from field: required uint64 reports_sent = 3;
     */
    reportsSent: bigint;
    /**
     * @generated from field: required double round_trip_time = 4;
     */
    roundTripTime: number;
    /**
     * @generated from field: required double total_round_trip_time = 5;
     */
    totalRoundTripTime: number;
    /**
     * @generated from field: required uint64 round_trip_time_measurements = 6;
     */
    roundTripTimeMeasurements: bigint;
};
/**
 * Describes the message livekit.proto.RemoteOutboundRtpStreamStats.
 * Use `create(RemoteOutboundRtpStreamStatsSchema)` to create a new message.
 */
export declare const RemoteOutboundRtpStreamStatsSchema: GenMessage<RemoteOutboundRtpStreamStats>;
/**
 * @generated from message livekit.proto.MediaSourceStats
 */
export type MediaSourceStats = Message<"livekit.proto.MediaSourceStats"> & {
    /**
     * @generated from field: required string track_identifier = 1;
     */
    trackIdentifier: string;
    /**
     * @generated from field: required string kind = 2;
     */
    kind: string;
};
/**
 * Describes the message livekit.proto.MediaSourceStats.
 * Use `create(MediaSourceStatsSchema)` to create a new message.
 */
export declare const MediaSourceStatsSchema: GenMessage<MediaSourceStats>;
/**
 * @generated from message livekit.proto.AudioSourceStats
 */
export type AudioSourceStats = Message<"livekit.proto.AudioSourceStats"> & {
    /**
     * @generated from field: required double audio_level = 1;
     */
    audioLevel: number;
    /**
     * @generated from field: required double total_audio_energy = 2;
     */
    totalAudioEnergy: number;
    /**
     * @generated from field: required double total_samples_duration = 3;
     */
    totalSamplesDuration: number;
    /**
     * @generated from field: required double echo_return_loss = 4;
     */
    echoReturnLoss: number;
    /**
     * @generated from field: required double echo_return_loss_enhancement = 5;
     */
    echoReturnLossEnhancement: number;
    /**
     * @generated from field: required double dropped_samples_duration = 6;
     */
    droppedSamplesDuration: number;
    /**
     * @generated from field: required uint32 dropped_samples_events = 7;
     */
    droppedSamplesEvents: number;
    /**
     * @generated from field: required double total_capture_delay = 8;
     */
    totalCaptureDelay: number;
    /**
     * @generated from field: required uint64 total_samples_captured = 9;
     */
    totalSamplesCaptured: bigint;
};
/**
 * Describes the message livekit.proto.AudioSourceStats.
 * Use `create(AudioSourceStatsSchema)` to create a new message.
 */
export declare const AudioSourceStatsSchema: GenMessage<AudioSourceStats>;
/**
 * @generated from message livekit.proto.VideoSourceStats
 */
export type VideoSourceStats = Message<"livekit.proto.VideoSourceStats"> & {
    /**
     * @generated from field: required uint32 width = 1;
     */
    width: number;
    /**
     * @generated from field: required uint32 height = 2;
     */
    height: number;
    /**
     * @generated from field: required uint32 frames = 3;
     */
    frames: number;
    /**
     * @generated from field: required double frames_per_second = 4;
     */
    framesPerSecond: number;
};
/**
 * Describes the message livekit.proto.VideoSourceStats.
 * Use `create(VideoSourceStatsSchema)` to create a new message.
 */
export declare const VideoSourceStatsSchema: GenMessage<VideoSourceStats>;
/**
 * @generated from message livekit.proto.AudioPlayoutStats
 */
export type AudioPlayoutStats = Message<"livekit.proto.AudioPlayoutStats"> & {
    /**
     * @generated from field: required string kind = 1;
     */
    kind: string;
    /**
     * @generated from field: required double synthesized_samples_duration = 2;
     */
    synthesizedSamplesDuration: number;
    /**
     * @generated from field: required uint32 synthesized_samples_events = 3;
     */
    synthesizedSamplesEvents: number;
    /**
     * @generated from field: required double total_samples_duration = 4;
     */
    totalSamplesDuration: number;
    /**
     * @generated from field: required double total_playout_delay = 5;
     */
    totalPlayoutDelay: number;
    /**
     * @generated from field: required uint64 total_samples_count = 6;
     */
    totalSamplesCount: bigint;
};
/**
 * Describes the message livekit.proto.AudioPlayoutStats.
 * Use `create(AudioPlayoutStatsSchema)` to create a new message.
 */
export declare const AudioPlayoutStatsSchema: GenMessage<AudioPlayoutStats>;
/**
 * @generated from message livekit.proto.PeerConnectionStats
 */
export type PeerConnectionStats = Message<"livekit.proto.PeerConnectionStats"> & {
    /**
     * @generated from field: required uint32 data_channels_opened = 1;
     */
    dataChannelsOpened: number;
    /**
     * @generated from field: required uint32 data_channels_closed = 2;
     */
    dataChannelsClosed: number;
};
/**
 * Describes the message livekit.proto.PeerConnectionStats.
 * Use `create(PeerConnectionStatsSchema)` to create a new message.
 */
export declare const PeerConnectionStatsSchema: GenMessage<PeerConnectionStats>;
/**
 * @generated from message livekit.proto.DataChannelStats
 */
export type DataChannelStats = Message<"livekit.proto.DataChannelStats"> & {
    /**
     * @generated from field: required string label = 1;
     */
    label: string;
    /**
     * @generated from field: required string protocol = 2;
     */
    protocol: string;
    /**
     * @generated from field: required int32 data_channel_identifier = 3;
     */
    dataChannelIdentifier: number;
    /**
     * @generated from field: optional livekit.proto.DataChannelState state = 4;
     */
    state: DataChannelState;
    /**
     * @generated from field: required uint32 messages_sent = 5;
     */
    messagesSent: number;
    /**
     * @generated from field: required uint64 bytes_sent = 6;
     */
    bytesSent: bigint;
    /**
     * @generated from field: required uint32 messages_received = 7;
     */
    messagesReceived: number;
    /**
     * @generated from field: required uint64 bytes_received = 8;
     */
    bytesReceived: bigint;
};
/**
 * Describes the message livekit.proto.DataChannelStats.
 * Use `create(DataChannelStatsSchema)` to create a new message.
 */
export declare const DataChannelStatsSchema: GenMessage<DataChannelStats>;
/**
 * @generated from message livekit.proto.TransportStats
 */
export type TransportStats = Message<"livekit.proto.TransportStats"> & {
    /**
     * @generated from field: required uint64 packets_sent = 1;
     */
    packetsSent: bigint;
    /**
     * @generated from field: required uint64 packets_received = 2;
     */
    packetsReceived: bigint;
    /**
     * @generated from field: required uint64 bytes_sent = 3;
     */
    bytesSent: bigint;
    /**
     * @generated from field: required uint64 bytes_received = 4;
     */
    bytesReceived: bigint;
    /**
     * @generated from field: required livekit.proto.IceRole ice_role = 5;
     */
    iceRole: IceRole;
    /**
     * @generated from field: required string ice_local_username_fragment = 6;
     */
    iceLocalUsernameFragment: string;
    /**
     * @generated from field: optional livekit.proto.DtlsTransportState dtls_state = 7;
     */
    dtlsState: DtlsTransportState;
    /**
     * @generated from field: optional livekit.proto.IceTransportState ice_state = 8;
     */
    iceState: IceTransportState;
    /**
     * @generated from field: required string selected_candidate_pair_id = 9;
     */
    selectedCandidatePairId: string;
    /**
     * @generated from field: required string local_certificate_id = 10;
     */
    localCertificateId: string;
    /**
     * @generated from field: required string remote_certificate_id = 11;
     */
    remoteCertificateId: string;
    /**
     * @generated from field: required string tls_version = 12;
     */
    tlsVersion: string;
    /**
     * @generated from field: required string dtls_cipher = 13;
     */
    dtlsCipher: string;
    /**
     * @generated from field: required livekit.proto.DtlsRole dtls_role = 14;
     */
    dtlsRole: DtlsRole;
    /**
     * @generated from field: required string srtp_cipher = 15;
     */
    srtpCipher: string;
    /**
     * @generated from field: required uint32 selected_candidate_pair_changes = 16;
     */
    selectedCandidatePairChanges: number;
};
/**
 * Describes the message livekit.proto.TransportStats.
 * Use `create(TransportStatsSchema)` to create a new message.
 */
export declare const TransportStatsSchema: GenMessage<TransportStats>;
/**
 * @generated from message livekit.proto.CandidatePairStats
 */
export type CandidatePairStats = Message<"livekit.proto.CandidatePairStats"> & {
    /**
     * @generated from field: required string transport_id = 1;
     */
    transportId: string;
    /**
     * @generated from field: required string local_candidate_id = 2;
     */
    localCandidateId: string;
    /**
     * @generated from field: required string remote_candidate_id = 3;
     */
    remoteCandidateId: string;
    /**
     * @generated from field: optional livekit.proto.IceCandidatePairState state = 4;
     */
    state: IceCandidatePairState;
    /**
     * @generated from field: required bool nominated = 5;
     */
    nominated: boolean;
    /**
     * @generated from field: required uint64 packets_sent = 6;
     */
    packetsSent: bigint;
    /**
     * @generated from field: required uint64 packets_received = 7;
     */
    packetsReceived: bigint;
    /**
     * @generated from field: required uint64 bytes_sent = 8;
     */
    bytesSent: bigint;
    /**
     * @generated from field: required uint64 bytes_received = 9;
     */
    bytesReceived: bigint;
    /**
     * @generated from field: required double last_packet_sent_timestamp = 10;
     */
    lastPacketSentTimestamp: number;
    /**
     * @generated from field: required double last_packet_received_timestamp = 11;
     */
    lastPacketReceivedTimestamp: number;
    /**
     * @generated from field: required double total_round_trip_time = 12;
     */
    totalRoundTripTime: number;
    /**
     * @generated from field: required double current_round_trip_time = 13;
     */
    currentRoundTripTime: number;
    /**
     * @generated from field: required double available_outgoing_bitrate = 14;
     */
    availableOutgoingBitrate: number;
    /**
     * @generated from field: required double available_incoming_bitrate = 15;
     */
    availableIncomingBitrate: number;
    /**
     * @generated from field: required uint64 requests_received = 16;
     */
    requestsReceived: bigint;
    /**
     * @generated from field: required uint64 requests_sent = 17;
     */
    requestsSent: bigint;
    /**
     * @generated from field: required uint64 responses_received = 18;
     */
    responsesReceived: bigint;
    /**
     * @generated from field: required uint64 responses_sent = 19;
     */
    responsesSent: bigint;
    /**
     * @generated from field: required uint64 consent_requests_sent = 20;
     */
    consentRequestsSent: bigint;
    /**
     * @generated from field: required uint32 packets_discarded_on_send = 21;
     */
    packetsDiscardedOnSend: number;
    /**
     * @generated from field: required uint64 bytes_discarded_on_send = 22;
     */
    bytesDiscardedOnSend: bigint;
};
/**
 * Describes the message livekit.proto.CandidatePairStats.
 * Use `create(CandidatePairStatsSchema)` to create a new message.
 */
export declare const CandidatePairStatsSchema: GenMessage<CandidatePairStats>;
/**
 * @generated from message livekit.proto.IceCandidateStats
 */
export type IceCandidateStats = Message<"livekit.proto.IceCandidateStats"> & {
    /**
     * @generated from field: required string transport_id = 1;
     */
    transportId: string;
    /**
     * @generated from field: required string address = 2;
     */
    address: string;
    /**
     * @generated from field: required int32 port = 3;
     */
    port: number;
    /**
     * @generated from field: required string protocol = 4;
     */
    protocol: string;
    /**
     * @generated from field: optional livekit.proto.IceCandidateType candidate_type = 5;
     */
    candidateType: IceCandidateType;
    /**
     * @generated from field: required int32 priority = 6;
     */
    priority: number;
    /**
     * @generated from field: required string url = 7;
     */
    url: string;
    /**
     * @generated from field: optional livekit.proto.IceServerTransportProtocol relay_protocol = 8;
     */
    relayProtocol: IceServerTransportProtocol;
    /**
     * @generated from field: required string foundation = 9;
     */
    foundation: string;
    /**
     * @generated from field: required string related_address = 10;
     */
    relatedAddress: string;
    /**
     * @generated from field: required int32 related_port = 11;
     */
    relatedPort: number;
    /**
     * @generated from field: required string username_fragment = 12;
     */
    usernameFragment: string;
    /**
     * @generated from field: optional livekit.proto.IceTcpCandidateType tcp_type = 13;
     */
    tcpType: IceTcpCandidateType;
};
/**
 * Describes the message livekit.proto.IceCandidateStats.
 * Use `create(IceCandidateStatsSchema)` to create a new message.
 */
export declare const IceCandidateStatsSchema: GenMessage<IceCandidateStats>;
/**
 * @generated from message livekit.proto.CertificateStats
 */
export type CertificateStats = Message<"livekit.proto.CertificateStats"> & {
    /**
     * @generated from field: required string fingerprint = 1;
     */
    fingerprint: string;
    /**
     * @generated from field: required string fingerprint_algorithm = 2;
     */
    fingerprintAlgorithm: string;
    /**
     * @generated from field: required string base64_certificate = 3;
     */
    base64Certificate: string;
    /**
     * @generated from field: required string issuer_certificate_id = 4;
     */
    issuerCertificateId: string;
};
/**
 * Describes the message livekit.proto.CertificateStats.
 * Use `create(CertificateStatsSchema)` to create a new message.
 */
export declare const CertificateStatsSchema: GenMessage<CertificateStats>;
/**
 * @generated from enum livekit.proto.DataChannelState
 */
export declare enum DataChannelState {
    /**
     * @generated from enum value: DC_CONNECTING = 0;
     */
    DC_CONNECTING = 0,
    /**
     * @generated from enum value: DC_OPEN = 1;
     */
    DC_OPEN = 1,
    /**
     * @generated from enum value: DC_CLOSING = 2;
     */
    DC_CLOSING = 2,
    /**
     * @generated from enum value: DC_CLOSED = 3;
     */
    DC_CLOSED = 3
}
/**
 * Describes the enum livekit.proto.DataChannelState.
 */
export declare const DataChannelStateSchema: GenEnum<DataChannelState>;
/**
 * @generated from enum livekit.proto.QualityLimitationReason
 */
export declare enum QualityLimitationReason {
    /**
     * @generated from enum value: LIMITATION_NONE = 0;
     */
    LIMITATION_NONE = 0,
    /**
     * @generated from enum value: LIMITATION_CPU = 1;
     */
    LIMITATION_CPU = 1,
    /**
     * @generated from enum value: LIMITATION_BANDWIDTH = 2;
     */
    LIMITATION_BANDWIDTH = 2,
    /**
     * @generated from enum value: LIMITATION_OTHER = 3;
     */
    LIMITATION_OTHER = 3
}
/**
 * Describes the enum livekit.proto.QualityLimitationReason.
 */
export declare const QualityLimitationReasonSchema: GenEnum<QualityLimitationReason>;
/**
 * @generated from enum livekit.proto.IceRole
 */
export declare enum IceRole {
    /**
     * @generated from enum value: ICE_UNKNOWN = 0;
     */
    ICE_UNKNOWN = 0,
    /**
     * @generated from enum value: ICE_CONTROLLING = 1;
     */
    ICE_CONTROLLING = 1,
    /**
     * @generated from enum value: ICE_CONTROLLED = 2;
     */
    ICE_CONTROLLED = 2
}
/**
 * Describes the enum livekit.proto.IceRole.
 */
export declare const IceRoleSchema: GenEnum<IceRole>;
/**
 * @generated from enum livekit.proto.DtlsTransportState
 */
export declare enum DtlsTransportState {
    /**
     * @generated from enum value: DTLS_TRANSPORT_NEW = 0;
     */
    DTLS_TRANSPORT_NEW = 0,
    /**
     * @generated from enum value: DTLS_TRANSPORT_CONNECTING = 1;
     */
    DTLS_TRANSPORT_CONNECTING = 1,
    /**
     * @generated from enum value: DTLS_TRANSPORT_CONNECTED = 2;
     */
    DTLS_TRANSPORT_CONNECTED = 2,
    /**
     * @generated from enum value: DTLS_TRANSPORT_CLOSED = 3;
     */
    DTLS_TRANSPORT_CLOSED = 3,
    /**
     * @generated from enum value: DTLS_TRANSPORT_FAILED = 4;
     */
    DTLS_TRANSPORT_FAILED = 4
}
/**
 * Describes the enum livekit.proto.DtlsTransportState.
 */
export declare const DtlsTransportStateSchema: GenEnum<DtlsTransportState>;
/**
 * @generated from enum livekit.proto.IceTransportState
 */
export declare enum IceTransportState {
    /**
     * @generated from enum value: ICE_TRANSPORT_NEW = 0;
     */
    ICE_TRANSPORT_NEW = 0,
    /**
     * @generated from enum value: ICE_TRANSPORT_CHECKING = 1;
     */
    ICE_TRANSPORT_CHECKING = 1,
    /**
     * @generated from enum value: ICE_TRANSPORT_CONNECTED = 2;
     */
    ICE_TRANSPORT_CONNECTED = 2,
    /**
     * @generated from enum value: ICE_TRANSPORT_COMPLETED = 3;
     */
    ICE_TRANSPORT_COMPLETED = 3,
    /**
     * @generated from enum value: ICE_TRANSPORT_DISCONNECTED = 4;
     */
    ICE_TRANSPORT_DISCONNECTED = 4,
    /**
     * @generated from enum value: ICE_TRANSPORT_FAILED = 5;
     */
    ICE_TRANSPORT_FAILED = 5,
    /**
     * @generated from enum value: ICE_TRANSPORT_CLOSED = 6;
     */
    ICE_TRANSPORT_CLOSED = 6
}
/**
 * Describes the enum livekit.proto.IceTransportState.
 */
export declare const IceTransportStateSchema: GenEnum<IceTransportState>;
/**
 * @generated from enum livekit.proto.DtlsRole
 */
export declare enum DtlsRole {
    /**
     * @generated from enum value: DTLS_CLIENT = 0;
     */
    DTLS_CLIENT = 0,
    /**
     * @generated from enum value: DTLS_SERVER = 1;
     */
    DTLS_SERVER = 1,
    /**
     * @generated from enum value: DTLS_UNKNOWN = 2;
     */
    DTLS_UNKNOWN = 2
}
/**
 * Describes the enum livekit.proto.DtlsRole.
 */
export declare const DtlsRoleSchema: GenEnum<DtlsRole>;
/**
 * @generated from enum livekit.proto.IceCandidatePairState
 */
export declare enum IceCandidatePairState {
    /**
     * @generated from enum value: PAIR_FROZEN = 0;
     */
    PAIR_FROZEN = 0,
    /**
     * @generated from enum value: PAIR_WAITING = 1;
     */
    PAIR_WAITING = 1,
    /**
     * @generated from enum value: PAIR_IN_PROGRESS = 2;
     */
    PAIR_IN_PROGRESS = 2,
    /**
     * @generated from enum value: PAIR_FAILED = 3;
     */
    PAIR_FAILED = 3,
    /**
     * @generated from enum value: PAIR_SUCCEEDED = 4;
     */
    PAIR_SUCCEEDED = 4
}
/**
 * Describes the enum livekit.proto.IceCandidatePairState.
 */
export declare const IceCandidatePairStateSchema: GenEnum<IceCandidatePairState>;
/**
 * @generated from enum livekit.proto.IceCandidateType
 */
export declare enum IceCandidateType {
    /**
     * @generated from enum value: HOST = 0;
     */
    HOST = 0,
    /**
     * @generated from enum value: SRFLX = 1;
     */
    SRFLX = 1,
    /**
     * @generated from enum value: PRFLX = 2;
     */
    PRFLX = 2,
    /**
     * @generated from enum value: RELAY = 3;
     */
    RELAY = 3
}
/**
 * Describes the enum livekit.proto.IceCandidateType.
 */
export declare const IceCandidateTypeSchema: GenEnum<IceCandidateType>;
/**
 * @generated from enum livekit.proto.IceServerTransportProtocol
 */
export declare enum IceServerTransportProtocol {
    /**
     * @generated from enum value: TRANSPORT_UDP = 0;
     */
    TRANSPORT_UDP = 0,
    /**
     * @generated from enum value: TRANSPORT_TCP = 1;
     */
    TRANSPORT_TCP = 1,
    /**
     * @generated from enum value: TRANSPORT_TLS = 2;
     */
    TRANSPORT_TLS = 2
}
/**
 * Describes the enum livekit.proto.IceServerTransportProtocol.
 */
export declare const IceServerTransportProtocolSchema: GenEnum<IceServerTransportProtocol>;
/**
 * @generated from enum livekit.proto.IceTcpCandidateType
 */
export declare enum IceTcpCandidateType {
    /**
     * @generated from enum value: CANDIDATE_ACTIVE = 0;
     */
    CANDIDATE_ACTIVE = 0,
    /**
     * @generated from enum value: CANDIDATE_PASSIVE = 1;
     */
    CANDIDATE_PASSIVE = 1,
    /**
     * @generated from enum value: CANDIDATE_SO = 2;
     */
    CANDIDATE_SO = 2
}
/**
 * Describes the enum livekit.proto.IceTcpCandidateType.
 */
export declare const IceTcpCandidateTypeSchema: GenEnum<IceTcpCandidateType>;
//# sourceMappingURL=stats_pb.d.ts.map