// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_handle } from "./handle_pb.js";
import { file_track } from "./track_pb.js";
/**
 * Describes the file audio_frame.proto.
 */
export const file_audio_frame = /*@__PURE__*/ fileDesc("ChFhdWRpb19mcmFtZS5wcm90bxINbGl2ZWtpdC5wcm90byKGAQoVTmV3QXVkaW9TdHJlYW1SZXF1ZXN0EhQKDHRyYWNrX2hhbmRsZRgBIAIoBBIsCgR0eXBlGAIgAigOMh4ubGl2ZWtpdC5wcm90by5BdWRpb1N0cmVhbVR5cGUSEwoLc2FtcGxlX3JhdGUYAyABKA0SFAoMbnVtX2NoYW5uZWxzGAQgASgNIkkKFk5ld0F1ZGlvU3RyZWFtUmVzcG9uc2USLwoGc3RyZWFtGAEgAigLMh8ubGl2ZWtpdC5wcm90by5Pd25lZEF1ZGlvU3RyZWFtIsoBCiFBdWRpb1N0cmVhbUZyb21QYXJ0aWNpcGFudFJlcXVlc3QSGgoScGFydGljaXBhbnRfaGFuZGxlGAEgAigEEiwKBHR5cGUYAiACKA4yHi5saXZla2l0LnByb3RvLkF1ZGlvU3RyZWFtVHlwZRIwCgx0cmFja19zb3VyY2UYAyABKA4yGi5saXZla2l0LnByb3RvLlRyYWNrU291cmNlEhMKC3NhbXBsZV9yYXRlGAUgASgNEhQKDG51bV9jaGFubmVscxgGIAEoDSJVCiJBdWRpb1N0cmVhbUZyb21QYXJ0aWNpcGFudFJlc3BvbnNlEi8KBnN0cmVhbRgBIAIoCzIfLmxpdmVraXQucHJvdG8uT3duZWRBdWRpb1N0cmVhbSK7AQoVTmV3QXVkaW9Tb3VyY2VSZXF1ZXN0EiwKBHR5cGUYASACKA4yHi5saXZla2l0LnByb3RvLkF1ZGlvU291cmNlVHlwZRIyCgdvcHRpb25zGAIgASgLMiEubGl2ZWtpdC5wcm90by5BdWRpb1NvdXJjZU9wdGlvbnMSEwoLc2FtcGxlX3JhdGUYAyACKA0SFAoMbnVtX2NoYW5uZWxzGAQgAigNEhUKDXF1ZXVlX3NpemVfbXMYBSABKA0iSQoWTmV3QXVkaW9Tb3VyY2VSZXNwb25zZRIvCgZzb3VyY2UYASACKAsyHy5saXZla2l0LnByb3RvLk93bmVkQXVkaW9Tb3VyY2UiZgoYQ2FwdHVyZUF1ZGlvRnJhbWVSZXF1ZXN0EhUKDXNvdXJjZV9oYW5kbGUYASACKAQSMwoGYnVmZmVyGAIgAigLMiMubGl2ZWtpdC5wcm90by5BdWRpb0ZyYW1lQnVmZmVySW5mbyItChlDYXB0dXJlQXVkaW9GcmFtZVJlc3BvbnNlEhAKCGFzeW5jX2lkGAEgAigEIjwKGUNhcHR1cmVBdWRpb0ZyYW1lQ2FsbGJhY2sSEAoIYXN5bmNfaWQYASACKAQSDQoFZXJyb3IYAiABKAkiMAoXQ2xlYXJBdWRpb0J1ZmZlclJlcXVlc3QSFQoNc291cmNlX2hhbmRsZRgBIAIoBCIaChhDbGVhckF1ZGlvQnVmZmVyUmVzcG9uc2UiGgoYTmV3QXVkaW9SZXNhbXBsZXJSZXF1ZXN0IlIKGU5ld0F1ZGlvUmVzYW1wbGVyUmVzcG9uc2USNQoJcmVzYW1wbGVyGAEgAigLMiIubGl2ZWtpdC5wcm90by5Pd25lZEF1ZGlvUmVzYW1wbGVyIpMBChdSZW1peEFuZFJlc2FtcGxlUmVxdWVzdBIYChByZXNhbXBsZXJfaGFuZGxlGAEgAigEEjMKBmJ1ZmZlchgCIAIoCzIjLmxpdmVraXQucHJvdG8uQXVkaW9GcmFtZUJ1ZmZlckluZm8SFAoMbnVtX2NoYW5uZWxzGAMgAigNEhMKC3NhbXBsZV9yYXRlGAQgAigNIlAKGFJlbWl4QW5kUmVzYW1wbGVSZXNwb25zZRI0CgZidWZmZXIYASACKAsyJC5saXZla2l0LnByb3RvLk93bmVkQXVkaW9GcmFtZUJ1ZmZlciKcAgoWTmV3U294UmVzYW1wbGVyUmVxdWVzdBISCgppbnB1dF9yYXRlGAEgAigBEhMKC291dHB1dF9yYXRlGAIgAigBEhQKDG51bV9jaGFubmVscxgDIAIoDRI8Cg9pbnB1dF9kYXRhX3R5cGUYBCACKA4yIy5saXZla2l0LnByb3RvLlNveFJlc2FtcGxlckRhdGFUeXBlEj0KEG91dHB1dF9kYXRhX3R5cGUYBSACKA4yIy5saXZla2l0LnByb3RvLlNveFJlc2FtcGxlckRhdGFUeXBlEjcKDnF1YWxpdHlfcmVjaXBlGAYgAigOMh8ubGl2ZWtpdC5wcm90by5Tb3hRdWFsaXR5UmVjaXBlEg0KBWZsYWdzGAcgASgNImwKF05ld1NveFJlc2FtcGxlclJlc3BvbnNlEjUKCXJlc2FtcGxlchgBIAEoCzIgLmxpdmVraXQucHJvdG8uT3duZWRTb3hSZXNhbXBsZXJIABIPCgVlcnJvchgCIAEoCUgAQgkKB21lc3NhZ2UiUwoXUHVzaFNveFJlc2FtcGxlclJlcXVlc3QSGAoQcmVzYW1wbGVyX2hhbmRsZRgBIAIoBBIQCghkYXRhX3B0chgCIAIoBBIMCgRzaXplGAMgAigNIksKGFB1c2hTb3hSZXNhbXBsZXJSZXNwb25zZRISCgpvdXRwdXRfcHRyGAEgAigEEgwKBHNpemUYAiACKA0SDQoFZXJyb3IYAyABKAkiNAoYRmx1c2hTb3hSZXNhbXBsZXJSZXF1ZXN0EhgKEHJlc2FtcGxlcl9oYW5kbGUYASACKAQiTAoZRmx1c2hTb3hSZXNhbXBsZXJSZXNwb25zZRISCgpvdXRwdXRfcHRyGAEgAigEEgwKBHNpemUYAiACKA0SDQoFZXJyb3IYAyABKAkicAoUQXVkaW9GcmFtZUJ1ZmZlckluZm8SEAoIZGF0YV9wdHIYASACKAQSFAoMbnVtX2NoYW5uZWxzGAIgAigNEhMKC3NhbXBsZV9yYXRlGAMgAigNEhsKE3NhbXBsZXNfcGVyX2NoYW5uZWwYBCACKA0ieQoVT3duZWRBdWRpb0ZyYW1lQnVmZmVyEi0KBmhhbmRsZRgBIAIoCzIdLmxpdmVraXQucHJvdG8uRmZpT3duZWRIYW5kbGUSMQoEaW5mbxgCIAIoCzIjLmxpdmVraXQucHJvdG8uQXVkaW9GcmFtZUJ1ZmZlckluZm8iPwoPQXVkaW9TdHJlYW1JbmZvEiwKBHR5cGUYASACKA4yHi5saXZla2l0LnByb3RvLkF1ZGlvU3RyZWFtVHlwZSJvChBPd25lZEF1ZGlvU3RyZWFtEi0KBmhhbmRsZRgBIAIoCzIdLmxpdmVraXQucHJvdG8uRmZpT3duZWRIYW5kbGUSLAoEaW5mbxgCIAIoCzIeLmxpdmVraXQucHJvdG8uQXVkaW9TdHJlYW1JbmZvIp8BChBBdWRpb1N0cmVhbUV2ZW50EhUKDXN0cmVhbV9oYW5kbGUYASACKAQSOwoOZnJhbWVfcmVjZWl2ZWQYAiABKAsyIS5saXZla2l0LnByb3RvLkF1ZGlvRnJhbWVSZWNlaXZlZEgAEiwKA2VvcxgDIAEoCzIdLmxpdmVraXQucHJvdG8uQXVkaW9TdHJlYW1FT1NIAEIJCgdtZXNzYWdlIkkKEkF1ZGlvRnJhbWVSZWNlaXZlZBIzCgVmcmFtZRgBIAIoCzIkLmxpdmVraXQucHJvdG8uT3duZWRBdWRpb0ZyYW1lQnVmZmVyIhAKDkF1ZGlvU3RyZWFtRU9TImUKEkF1ZGlvU291cmNlT3B0aW9ucxIZChFlY2hvX2NhbmNlbGxhdGlvbhgBIAIoCBIZChFub2lzZV9zdXBwcmVzc2lvbhgCIAIoCBIZChFhdXRvX2dhaW5fY29udHJvbBgDIAIoCCI/Cg9BdWRpb1NvdXJjZUluZm8SLAoEdHlwZRgCIAIoDjIeLmxpdmVraXQucHJvdG8uQXVkaW9Tb3VyY2VUeXBlIm8KEE93bmVkQXVkaW9Tb3VyY2USLQoGaGFuZGxlGAEgAigLMh0ubGl2ZWtpdC5wcm90by5GZmlPd25lZEhhbmRsZRIsCgRpbmZvGAIgAigLMh4ubGl2ZWtpdC5wcm90by5BdWRpb1NvdXJjZUluZm8iFAoSQXVkaW9SZXNhbXBsZXJJbmZvInUKE093bmVkQXVkaW9SZXNhbXBsZXISLQoGaGFuZGxlGAEgAigLMh0ubGl2ZWtpdC5wcm90by5GZmlPd25lZEhhbmRsZRIvCgRpbmZvGAIgAigLMiEubGl2ZWtpdC5wcm90by5BdWRpb1Jlc2FtcGxlckluZm8iEgoQU294UmVzYW1wbGVySW5mbyJxChFPd25lZFNveFJlc2FtcGxlchItCgZoYW5kbGUYASACKAsyHS5saXZla2l0LnByb3RvLkZmaU93bmVkSGFuZGxlEi0KBGluZm8YAiACKAsyHy5saXZla2l0LnByb3RvLlNveFJlc2FtcGxlckluZm8qSgoUU294UmVzYW1wbGVyRGF0YVR5cGUSGAoUU09YUl9EQVRBVFlQRV9JTlQxNkkQABIYChRTT1hSX0RBVEFUWVBFX0lOVDE2UxABKosBChBTb3hRdWFsaXR5UmVjaXBlEhYKElNPWFJfUVVBTElUWV9RVUlDSxAAEhQKEFNPWFJfUVVBTElUWV9MT1cQARIXChNTT1hSX1FVQUxJVFlfTUVESVVNEAISFQoRU09YUl9RVUFMSVRZX0hJR0gQAxIZChVTT1hSX1FVQUxJVFlfVkVSWUhJR0gQBCqXAQoLU294RmxhZ0JpdHMSFgoSU09YUl9ST0xMT0ZGX1NNQUxMEAASFwoTU09YUl9ST0xMT0ZGX01FRElVTRABEhUKEVNPWFJfUk9MTE9GRl9OT05FEAISGAoUU09YUl9ISUdIX1BSRUNfQ0xPQ0sQAxIZChVTT1hSX0RPVUJMRV9QUkVDSVNJT04QBBILCgdTT1hSX1ZSEAUqQQoPQXVkaW9TdHJlYW1UeXBlEhcKE0FVRElPX1NUUkVBTV9OQVRJVkUQABIVChFBVURJT19TVFJFQU1fSFRNTBABKioKD0F1ZGlvU291cmNlVHlwZRIXChNBVURJT19TT1VSQ0VfTkFUSVZFEABCEKoCDUxpdmVLaXQuUHJvdG8", [file_handle, file_track]);
/**
 * Describes the message livekit.proto.NewAudioStreamRequest.
 * Use `create(NewAudioStreamRequestSchema)` to create a new message.
 */
export const NewAudioStreamRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 0);
/**
 * Describes the message livekit.proto.NewAudioStreamResponse.
 * Use `create(NewAudioStreamResponseSchema)` to create a new message.
 */
export const NewAudioStreamResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 1);
/**
 * Describes the message livekit.proto.AudioStreamFromParticipantRequest.
 * Use `create(AudioStreamFromParticipantRequestSchema)` to create a new message.
 */
export const AudioStreamFromParticipantRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 2);
/**
 * Describes the message livekit.proto.AudioStreamFromParticipantResponse.
 * Use `create(AudioStreamFromParticipantResponseSchema)` to create a new message.
 */
export const AudioStreamFromParticipantResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 3);
/**
 * Describes the message livekit.proto.NewAudioSourceRequest.
 * Use `create(NewAudioSourceRequestSchema)` to create a new message.
 */
export const NewAudioSourceRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 4);
/**
 * Describes the message livekit.proto.NewAudioSourceResponse.
 * Use `create(NewAudioSourceResponseSchema)` to create a new message.
 */
export const NewAudioSourceResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 5);
/**
 * Describes the message livekit.proto.CaptureAudioFrameRequest.
 * Use `create(CaptureAudioFrameRequestSchema)` to create a new message.
 */
export const CaptureAudioFrameRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 6);
/**
 * Describes the message livekit.proto.CaptureAudioFrameResponse.
 * Use `create(CaptureAudioFrameResponseSchema)` to create a new message.
 */
export const CaptureAudioFrameResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 7);
/**
 * Describes the message livekit.proto.CaptureAudioFrameCallback.
 * Use `create(CaptureAudioFrameCallbackSchema)` to create a new message.
 */
export const CaptureAudioFrameCallbackSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 8);
/**
 * Describes the message livekit.proto.ClearAudioBufferRequest.
 * Use `create(ClearAudioBufferRequestSchema)` to create a new message.
 */
export const ClearAudioBufferRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 9);
/**
 * Describes the message livekit.proto.ClearAudioBufferResponse.
 * Use `create(ClearAudioBufferResponseSchema)` to create a new message.
 */
export const ClearAudioBufferResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 10);
/**
 * Describes the message livekit.proto.NewAudioResamplerRequest.
 * Use `create(NewAudioResamplerRequestSchema)` to create a new message.
 */
export const NewAudioResamplerRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 11);
/**
 * Describes the message livekit.proto.NewAudioResamplerResponse.
 * Use `create(NewAudioResamplerResponseSchema)` to create a new message.
 */
export const NewAudioResamplerResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 12);
/**
 * Describes the message livekit.proto.RemixAndResampleRequest.
 * Use `create(RemixAndResampleRequestSchema)` to create a new message.
 */
export const RemixAndResampleRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 13);
/**
 * Describes the message livekit.proto.RemixAndResampleResponse.
 * Use `create(RemixAndResampleResponseSchema)` to create a new message.
 */
export const RemixAndResampleResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 14);
/**
 * Describes the message livekit.proto.NewSoxResamplerRequest.
 * Use `create(NewSoxResamplerRequestSchema)` to create a new message.
 */
export const NewSoxResamplerRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 15);
/**
 * Describes the message livekit.proto.NewSoxResamplerResponse.
 * Use `create(NewSoxResamplerResponseSchema)` to create a new message.
 */
export const NewSoxResamplerResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 16);
/**
 * Describes the message livekit.proto.PushSoxResamplerRequest.
 * Use `create(PushSoxResamplerRequestSchema)` to create a new message.
 */
export const PushSoxResamplerRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 17);
/**
 * Describes the message livekit.proto.PushSoxResamplerResponse.
 * Use `create(PushSoxResamplerResponseSchema)` to create a new message.
 */
export const PushSoxResamplerResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 18);
/**
 * Describes the message livekit.proto.FlushSoxResamplerRequest.
 * Use `create(FlushSoxResamplerRequestSchema)` to create a new message.
 */
export const FlushSoxResamplerRequestSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 19);
/**
 * Describes the message livekit.proto.FlushSoxResamplerResponse.
 * Use `create(FlushSoxResamplerResponseSchema)` to create a new message.
 */
export const FlushSoxResamplerResponseSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 20);
/**
 * Describes the message livekit.proto.AudioFrameBufferInfo.
 * Use `create(AudioFrameBufferInfoSchema)` to create a new message.
 */
export const AudioFrameBufferInfoSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 21);
/**
 * Describes the message livekit.proto.OwnedAudioFrameBuffer.
 * Use `create(OwnedAudioFrameBufferSchema)` to create a new message.
 */
export const OwnedAudioFrameBufferSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 22);
/**
 * Describes the message livekit.proto.AudioStreamInfo.
 * Use `create(AudioStreamInfoSchema)` to create a new message.
 */
export const AudioStreamInfoSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 23);
/**
 * Describes the message livekit.proto.OwnedAudioStream.
 * Use `create(OwnedAudioStreamSchema)` to create a new message.
 */
export const OwnedAudioStreamSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 24);
/**
 * Describes the message livekit.proto.AudioStreamEvent.
 * Use `create(AudioStreamEventSchema)` to create a new message.
 */
export const AudioStreamEventSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 25);
/**
 * Describes the message livekit.proto.AudioFrameReceived.
 * Use `create(AudioFrameReceivedSchema)` to create a new message.
 */
export const AudioFrameReceivedSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 26);
/**
 * Describes the message livekit.proto.AudioStreamEOS.
 * Use `create(AudioStreamEOSSchema)` to create a new message.
 */
export const AudioStreamEOSSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 27);
/**
 * Describes the message livekit.proto.AudioSourceOptions.
 * Use `create(AudioSourceOptionsSchema)` to create a new message.
 */
export const AudioSourceOptionsSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 28);
/**
 * Describes the message livekit.proto.AudioSourceInfo.
 * Use `create(AudioSourceInfoSchema)` to create a new message.
 */
export const AudioSourceInfoSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 29);
/**
 * Describes the message livekit.proto.OwnedAudioSource.
 * Use `create(OwnedAudioSourceSchema)` to create a new message.
 */
export const OwnedAudioSourceSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 30);
/**
 * Describes the message livekit.proto.AudioResamplerInfo.
 * Use `create(AudioResamplerInfoSchema)` to create a new message.
 */
export const AudioResamplerInfoSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 31);
/**
 * Describes the message livekit.proto.OwnedAudioResampler.
 * Use `create(OwnedAudioResamplerSchema)` to create a new message.
 */
export const OwnedAudioResamplerSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 32);
/**
 * Describes the message livekit.proto.SoxResamplerInfo.
 * Use `create(SoxResamplerInfoSchema)` to create a new message.
 */
export const SoxResamplerInfoSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 33);
/**
 * Describes the message livekit.proto.OwnedSoxResampler.
 * Use `create(OwnedSoxResamplerSchema)` to create a new message.
 */
export const OwnedSoxResamplerSchema = /*@__PURE__*/ messageDesc(file_audio_frame, 34);
/**
 * @generated from enum livekit.proto.SoxResamplerDataType
 */
export var SoxResamplerDataType;
(function (SoxResamplerDataType) {
    /**
     * TODO(theomonnom): support other datatypes (shouldn't really be needed)
     *
     * @generated from enum value: SOXR_DATATYPE_INT16I = 0;
     */
    SoxResamplerDataType[SoxResamplerDataType["SOXR_DATATYPE_INT16I"] = 0] = "SOXR_DATATYPE_INT16I";
    /**
     * @generated from enum value: SOXR_DATATYPE_INT16S = 1;
     */
    SoxResamplerDataType[SoxResamplerDataType["SOXR_DATATYPE_INT16S"] = 1] = "SOXR_DATATYPE_INT16S";
})(SoxResamplerDataType || (SoxResamplerDataType = {}));
/**
 * Describes the enum livekit.proto.SoxResamplerDataType.
 */
export const SoxResamplerDataTypeSchema = /*@__PURE__*/ enumDesc(file_audio_frame, 0);
/**
 * @generated from enum livekit.proto.SoxQualityRecipe
 */
export var SoxQualityRecipe;
(function (SoxQualityRecipe) {
    /**
     * @generated from enum value: SOXR_QUALITY_QUICK = 0;
     */
    SoxQualityRecipe[SoxQualityRecipe["SOXR_QUALITY_QUICK"] = 0] = "SOXR_QUALITY_QUICK";
    /**
     * @generated from enum value: SOXR_QUALITY_LOW = 1;
     */
    SoxQualityRecipe[SoxQualityRecipe["SOXR_QUALITY_LOW"] = 1] = "SOXR_QUALITY_LOW";
    /**
     * @generated from enum value: SOXR_QUALITY_MEDIUM = 2;
     */
    SoxQualityRecipe[SoxQualityRecipe["SOXR_QUALITY_MEDIUM"] = 2] = "SOXR_QUALITY_MEDIUM";
    /**
     * @generated from enum value: SOXR_QUALITY_HIGH = 3;
     */
    SoxQualityRecipe[SoxQualityRecipe["SOXR_QUALITY_HIGH"] = 3] = "SOXR_QUALITY_HIGH";
    /**
     * @generated from enum value: SOXR_QUALITY_VERYHIGH = 4;
     */
    SoxQualityRecipe[SoxQualityRecipe["SOXR_QUALITY_VERYHIGH"] = 4] = "SOXR_QUALITY_VERYHIGH";
})(SoxQualityRecipe || (SoxQualityRecipe = {}));
/**
 * Describes the enum livekit.proto.SoxQualityRecipe.
 */
export const SoxQualityRecipeSchema = /*@__PURE__*/ enumDesc(file_audio_frame, 1);
/**
 * @generated from enum livekit.proto.SoxFlagBits
 */
export var SoxFlagBits;
(function (SoxFlagBits) {
    /**
     * 1 << 0
     *
     * @generated from enum value: SOXR_ROLLOFF_SMALL = 0;
     */
    SoxFlagBits[SoxFlagBits["SOXR_ROLLOFF_SMALL"] = 0] = "SOXR_ROLLOFF_SMALL";
    /**
     * 1 << 1
     *
     * @generated from enum value: SOXR_ROLLOFF_MEDIUM = 1;
     */
    SoxFlagBits[SoxFlagBits["SOXR_ROLLOFF_MEDIUM"] = 1] = "SOXR_ROLLOFF_MEDIUM";
    /**
     * 1 << 2
     *
     * @generated from enum value: SOXR_ROLLOFF_NONE = 2;
     */
    SoxFlagBits[SoxFlagBits["SOXR_ROLLOFF_NONE"] = 2] = "SOXR_ROLLOFF_NONE";
    /**
     * 1 << 3
     *
     * @generated from enum value: SOXR_HIGH_PREC_CLOCK = 3;
     */
    SoxFlagBits[SoxFlagBits["SOXR_HIGH_PREC_CLOCK"] = 3] = "SOXR_HIGH_PREC_CLOCK";
    /**
     * 1 << 4
     *
     * @generated from enum value: SOXR_DOUBLE_PRECISION = 4;
     */
    SoxFlagBits[SoxFlagBits["SOXR_DOUBLE_PRECISION"] = 4] = "SOXR_DOUBLE_PRECISION";
    /**
     * 1 << 5
     *
     * @generated from enum value: SOXR_VR = 5;
     */
    SoxFlagBits[SoxFlagBits["SOXR_VR"] = 5] = "SOXR_VR";
})(SoxFlagBits || (SoxFlagBits = {}));
/**
 * Describes the enum livekit.proto.SoxFlagBits.
 */
export const SoxFlagBitsSchema = /*@__PURE__*/ enumDesc(file_audio_frame, 2);
/**
 * @generated from enum livekit.proto.AudioStreamType
 */
export var AudioStreamType;
(function (AudioStreamType) {
    /**
     * @generated from enum value: AUDIO_STREAM_NATIVE = 0;
     */
    AudioStreamType[AudioStreamType["AUDIO_STREAM_NATIVE"] = 0] = "AUDIO_STREAM_NATIVE";
    /**
     * @generated from enum value: AUDIO_STREAM_HTML = 1;
     */
    AudioStreamType[AudioStreamType["AUDIO_STREAM_HTML"] = 1] = "AUDIO_STREAM_HTML";
})(AudioStreamType || (AudioStreamType = {}));
/**
 * Describes the enum livekit.proto.AudioStreamType.
 */
export const AudioStreamTypeSchema = /*@__PURE__*/ enumDesc(file_audio_frame, 3);
/**
 * @generated from enum livekit.proto.AudioSourceType
 */
export var AudioSourceType;
(function (AudioSourceType) {
    /**
     * @generated from enum value: AUDIO_SOURCE_NATIVE = 0;
     */
    AudioSourceType[AudioSourceType["AUDIO_SOURCE_NATIVE"] = 0] = "AUDIO_SOURCE_NATIVE";
})(AudioSourceType || (AudioSourceType = {}));
/**
 * Describes the enum livekit.proto.AudioSourceType.
 */
export const AudioSourceTypeSchema = /*@__PURE__*/ enumDesc(file_audio_frame, 4);
//# sourceMappingURL=audio_frame_pb.js.map